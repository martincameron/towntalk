
rem {
	List the word with the most anagrams in the specified word-file.
}

const MAX_WORDS = 0x80000;

global wordfile;

array words, stat, stats, keys, index, chain;

function calculate_stats( wordidx ) {
	var word, widx, wlen, sidx, hash;
	# Calculate character distribution.
	let word = [ words wordidx ];
	let widx = 0;
	let wlen = $len( word );
	while <( widx wlen ) {
		let sidx = &( $chr( word widx ) 31 );
		set [ stat sidx ] = +( [ stat sidx ] 1 );
		let widx = +( widx 1 );
	}
	# Convert stat array to string.
	let word = $sub( stat 0 32 );
	set [ stats wordidx ] = word;
	# Calculate hash key.
	let widx = 0;
	while <( widx 32 ) {
		let hash = +( *( hash 3 ) $chr( word widx ) );
		set [ stat widx ] = 0;
		let widx = +( widx 1 );
	}
	let hash = &( hash 0xFFFF );
	set [ keys wordidx ] = hash;
	# Link word into chain indexed by the hash.
	set [ chain wordidx ] = [ index hash ];
	set [ index hash ] = wordidx;
}

function parse_words( file ) {
	var idx, wordcount, filelen, offset;
	let wordcount = 1;
	let idx = 0;
	let filelen = $len( file );
	while <( idx filelen ) {
		if <e( $chr( file idx ) 32 ) {
			if >( idx offset ) {
				set [words wordcount] = $sub( file offset -(idx offset) );
				call calculate_stats( wordcount );
				let wordcount = +( wordcount 1 );
			}
			let offset = +( idx 1 );
		}
		let idx = +( idx 1 );
	}
	return wordcount;
}

function find_anagram( wordcount ) {
	# Find the longest word with the most anagrams.
	var wordstat, wordidx, anaidx, anacount, count, chainidx;
	let anaidx = 1;
	let wordidx = 1;
	while <( wordidx wordcount ) {
		# Calculate number of anagrams of current word.
		let count = 0;
		let chainidx = [ index [ keys wordidx ] ];
		let wordstat = [ stats wordidx ];
		while >( chainidx 0 ) {
			let count = +( count !( $cmp( wordstat [ stats chainidx ] ) ) );
			let chainidx = [ chain chainidx ];
		}
		# If more anagrams or word is longer then update.
		if |( >( count anacount )
		   &( =( count anacount ) >( $len( [ words wordidx ] ) $len( [ words anaidx ] ) ) ) ) {
			let anaidx = wordidx;
			let anacount = count;
		}
		let wordidx = +( wordidx 1 );
	}
	return anaidx;
}

function list_anagrams( wordidx ) {
	var wordstat, chainidx;
	# List the anagrams of the specified word index.
	let wordstat = [ stats wordidx ];
	let chainidx = [ index [ keys wordidx ] ];
	while >( chainidx 0 ) {
		if !( $cmp( wordstat [ stats chainidx ] ) ) {
			print [ words chainidx ];
		}
		let chainidx = [ chain chainidx ];
	}
}

program anagrams {
	var wordcount, anaidx;
	if <( $argc 2 ) {
		error "Usage: tt anagrams.tt words.txt";
	} else {
		dim [ words MAX_WORDS ];
		dim [ stat 32 ];
		dim [ stats MAX_WORDS ];
		dim [ keys MAX_WORDS ];
		dim [ index 0x10000 ];
		dim [ chain MAX_WORDS ];
		let wordcount = parse_words( $load( $argv( 1 ) ) );
		let anaidx = find_anagram( wordcount );
		call list_anagrams( anaidx );
	}
}
