
rem {
	A simple LZ77 implementation with a 64k search window.
	The output consists of token bytes optionally followed by literals.
		0xxxxxxx                   : Offset 0, length X.
		1xxxxxxx yyyyyyyy yyyyyyyy : Offset Y, length X.
	When offset is zero, length is the number of bytes to be copied from the input.
	When offset is positive, length bytes are to be copied from the output.
}

array index, chain, buffer;

function encode( input ) {
	var inputIdx, inputLen, outputIdx;
	var literals, matchOffset, matchLength;
	var key, searchIdx, literalIdx, idx, end, len;
	dim [ index 65536 ];
	dim [ chain 65536 ];
	let inputLen = $len( input );
	dim [ buffer inputLen ];
	while '( inputIdx < inputLen ) {
		let matchOffset = 0;
		let matchLength = 1;
		if '( '( inputIdx + 2 ) < inputLen ) {
			let key = '(       '(    $chr( input    inputIdx )       & 0xFF ) * 256 );
			let key = '( key ^ '( '( $chr( input '( inputIdx + 1 ) ) & 0xFF ) * 16 ) );
			let key = '( key ^ '(    $chr( input '( inputIdx + 2 ) ) & 0xFF ) );
			let searchIdx = '( [ index key ] - 1 );
			while '( '( '( inputIdx - searchIdx ) < 65536 ) && '( searchIdx > 0 ) ) {
				if '( '( inputIdx + matchLength ) < inputLen ) {
					if '( $chr( input '( inputIdx + matchLength ) ) = $chr( input '( searchIdx + matchLength ) ) ) {
						let len = 0;
						while '( '( inputIdx + len ) < inputLen ) {
							if '( $chr( input '( searchIdx + len ) ) = $chr( input '( inputIdx + len ) ) ) {
								inc len;
							} else {
								break;
							}
						}
						if '( len > matchLength ) {
							let matchOffset = '( inputIdx - searchIdx );
							let matchLength = len;
						}
					}
				}
				let searchIdx = '( [ chain '( searchIdx & 0xFFFF ) ] - 1 );
			}
			if '( matchLength < 4 ) {
				let matchOffset = 0;
				let matchLength = 1;
			} else {
				if '( matchLength > 127 ) {
					let matchLength = 127;
				}
			}
			let idx = inputIdx;
			let end = '( inputIdx + matchLength );
			if '( '( end + 2 ) > inputLen ) {
				let end = '( inputLen - 2 );
			}
			while '( idx < end ) {
				# Update the index for each byte of the input to be encoded.
				let key = '(       '(    $chr( input    idx )       & 0xFF ) * 256 );
				let key = '( key ^ '( '( $chr( input '( idx + 1 ) ) & 0xFF ) * 16 ) );
				let key = '( key ^ '(    $chr( input '( idx + 2 ) ) & 0xFF ) );
				set [ chain '( idx & 0xFFFF ) ] = [ index key ];
				set [ index key ] = '( idx + 1 );
				inc idx;
			}
		}
		if '( matchOffset = 0 ) {
			let literals = '( literals + matchLength );
			let inputIdx = '( inputIdx + matchLength );
		}
		if '( literals > 0 ) {
			# Flush literals if match found, end of input, or longest encodable run.
			if '( '( '( matchOffset > 0 ) || '( inputIdx = inputLen ) ) || '( literals = 127 ) ) {
				set [ buffer outputIdx ] = literals;
				inc outputIdx;
				let literalIdx = '( inputIdx - literals );
				while '( literalIdx < inputIdx ) {
					set [ buffer outputIdx ] = $chr( input literalIdx );
					inc literalIdx;
					inc outputIdx;
				}
				let literals = 0;
			}
		}
		if '( matchOffset > 0 ) {
			#print $str( "Offset "  matchOffset  " Length "  matchLength );
			set [ buffer outputIdx ] = '( 0x80 | matchLength );
			inc outputIdx;
			set [ buffer outputIdx ] = '( matchOffset >> 8 );
			inc outputIdx;
			set [ buffer outputIdx ] = matchOffset;
			inc outputIdx;
			let inputIdx = '( inputIdx + matchLength );
		}
	}
	return $sub( buffer 0 outputIdx );
}

function decode( input ) {
	var inputIdx, inputLen, outputIdx, outputEnd, matchOffset, matchLength, output;
	let inputLen = $len( input );
	while '( output = 0 ) {
		let inputIdx = 0;
		while '( inputIdx < inputLen ) {
			let matchOffset = 0;
			let matchLength = '( $chr( input inputIdx ) & 0xFF );
			inc inputIdx;
			if '( matchLength > 127 ) {
				let matchLength = '( matchLength & 0x7F );
				let matchOffset = '( $chr( input inputIdx ) & 0xFF );
				inc inputIdx;
				let matchOffset = '( '( matchOffset * 256 ) | '( $chr( input inputIdx ) & 0xFF ) );
				inc inputIdx;
			}
			if '( $len( buffer ) = 0 ) {
				let outputIdx = '( outputIdx + matchLength );
				if '( matchOffset = 0 ) {
					let inputIdx = '( inputIdx + matchLength );
				}
			} else {
				let outputEnd = '( outputIdx + matchLength );
				if '( matchOffset = 0 ) {
					while '( outputIdx < outputEnd ) {
						set [ buffer outputIdx ] = $chr( input inputIdx );
						inc inputIdx;
						inc outputIdx;
					}
				} else {
					while '( outputIdx < outputEnd ) {
						set [ buffer outputIdx ] = [ buffer '( outputIdx - matchOffset ) ];
						inc outputIdx;
					}
				}
			}
		}
		if '( $len( buffer ) = 0 ) {
			dim [ buffer outputIdx ];
		} else {
			let output = $sub( buffer 0, outputIdx );
		}
	}
	return output;
}

program lz77x {
	var original, encoded;
	if '( $argc < 2 ) {
		error "LZ77x test program.";
		error "Usage: tt lz77x.tt input";
	} else {
		let original = $load( $argv( 1 ) );
		let encoded = encode( original );
		print $str( "Compressed length: " $len( encoded ) );
		let encoded = decode( encoded );
		print $str( "Decoded length: " $len( encoded ) );
		if $cmp( original encoded ) {
			throw "Decoded data does not match original.";
		}
	}
}
