
rem { Test }

const ONE = 1;
const STR = "*";
const ELE = ${ ( * ) };

global g;
array a;

include "hello.tt";

function assert( value, elem ) {
	if !( value ) {
		throw $str( "Assertion failed on line " $line( elem ) );
	}
}

function except( elem ) {
	throw $tup( elem, $line( elem ) );
}

function testvoid() {
}

function testvars( x ) {
	var y;
	let y = x;
	call assert( =( y x ), ${-} );
	let g = y;
	call assert( =( g x ), ${-} );
	call assert( =( TRUE 1 ), ${-} );
	call assert( =( FALSE 0 ), ${-} );
	return g;
}

function testarray() {
	var err;
	try { dim [ except( ${ 1 } ) except( ${ 2 } ) ]; } catch err {}
	call assert( =( $cmp( err "1" ) 0 ), ${-} );
	let err = 0;
	try { dim [ a except( ${-} ) ]; } catch err {}
	call assert( err, ${-} );
	let err = 0;
	try { dim [ 0 0 ]; } catch err {}
	call assert( err, ${-} );
	let err = 0;
	try { dim [ a -1 ]; } catch err {}
	call assert( err, ${-} );
	dim [ a 3 ];
	set [ a 0 ] = "a";
	set [ a 1 ] = 1;
	set [ a 2 ] = [ a 0 ];
	dim [ a 2 ];
	try {
		set [ a 2 ] = 2;
		throw 0;
	} catch err {
	}
	call assert( =( err 2 ), ${-} );
	dim [ a 1 ];
	call assert( =( $cmp( [ a 0 ] "a" ) 0 ), ${-} );
	let a = ${ 0, $str( "\"one" "\"" ), $tup( "\\two\\"2 ), "\063", ${ four(4) }, 84, 84 };
	let a = $parse( $arr( a ) );
	call assert( =( $len( a ) 7 ), ${-} );
	call assert( =( [ a 0 ] 0 ), ${-} );
	call assert( =( $cmp( [ a 1 ] "\"one\"" ) 0 ), ${-} );
	call assert( =( $cmp( [ a 2 ] "\\two\\" ) 0 ), ${-} );
	call assert( =( [ a 2 ] 2 ), ${-} );
	call assert( =( $cmp( [ a 3 ] "3" ) 0 ), ${-} );
	call assert( =( $cmp( [ a 4 ] "four" ) 0 ), ${-} );
	call assert( =( $cmp( $child( $next( [ a 4 ] ) ) "4" ) 0 ), ${-} );
	call assert( =( $cmp( $sub( a, 5, 2 ) "TT" ) 0 ), ${-} );
	call assert( =( $cmp( a "#Array#" ) 0 ), ${-} );
}

function fact( x ) {
	if >( x 1 ) {
		return *( x fact( -( x 1 ) ) );
	} else {
		return 1;
	}
}

function testswitch() {
	var x, err;
	try { switch except( ${-} ) {} } catch err {}
	call assert( err, ${-} );
	let err = 0;
	try { switch 0 { case except( ${-} ) { let err = 0; } } } catch err {}
	call assert( err, ${-} );
	let err = 0;
	try { switch 0 { case 0 { call except( ${-} ); } } } catch err {}
	call assert( err, ${-} );
	switch $tup( "a" 1 ) {
		case 1   { let x = 0; }
		case "a" { let x = 0; }
		case $tup( "a" 1 ) { inc x; }
	}
	switch "a" {
		case "a" { inc x; }
	}
	switch 1 {
		case 1 { inc x; }
		default { let x = 0; }
	}
	switch 2 {
		default { inc x; }
	}
	call assert( =( x 4 ), ${-} );
}

function testif() {
	var x, err;
	try { if except( ${-} ) { let err = 0; } } catch err {}
	call assert( err, ${-} );
	if FALSE { call assert( 0, ${-} ); }
	if TRUE { let x = 2; }
	call assert( =( x 2 ), ${-} );
	if "" { let x = 3; }
	call assert( =( x 3 ), ${-} );
}

function testwhile() {
	var err, n;
	try { while except( ${-} ) { let err = 0; } } catch err {}
	call assert( err, ${-} );
	while <( n 1 ) { inc n; }
	call assert( =( n 1 ), ${-} );
	while <( n 10 ) {
		break;
		call assert( FALSE, ${-} );
	}
	while <( n 10 ) {
		if =( n 5 ) { break; }
		inc n;
		continue;
		call assert( FALSE, ${-} );
	}
	call assert( =( n 5 ), ${-} );
	while TRUE {
		try { break; } catch err {}
		call assert( FALSE, ${-} );
	}
	while TRUE {
		try { throw 0; } catch err { break; }
		call assert( FALSE, ${-} );
	}
	while TRUE {
		return 0;
		call assert( FALSE, ${-} );
	}
}

function testtry() {
	var e;
	try {} catch e { call assert( FALSE, ${-} ); }
	try {
		try {
			throw 1;
		} catch e {
			call assert( =( e 1 ), ${-} );
			throw 2;
		}
	} catch e {
	}
	call assert( =( e 2 ), ${-} );
	try { try { return 0; } catch e {} } catch e {}
	call assert( FALSE, ${-} );
}

function testinfix() {
	call assert( '( ONE=1 ), ${-} );
}

function testarith() {
	var err;
	try { call +( except( ${ 1 } ) except( ${ 2 } ) ); } catch err {}
	call assert( =( $cmp( err "1" ) 0 ), ${-} );
	let err = 0;
	try { call +( 0 except( ${-} ) ); } catch err {}
	call assert( err, ${-} );
	call assert( =( +( +( 1 1 ) +( 1 1 ) ) 4 ), ${-} );
	call assert( =( +( 1 1 ) 2 ), ${-} );
	call assert( =( -( 1 1 ) 0 ), ${-} );
	call assert( =( *( 2 2 ) 4 ), ${-} );
	call assert( =( /( 6 2 ) 3 ), ${-} );
	let err = 0;
	try { call /( 1 0 ); } catch err {}
	call assert( err, ${-} );
	call assert( =( %( 6 4 ) 2 ), ${-} );
	let err = 0;
	try { call %( 1 0 ); } catch err {}
	call assert( err, ${-} );
	call assert( =( >>( -8 1 ) -4 ), ${-} );
	call assert( =( 1 1 ), ${-} );
	call assert( =( =( 1 0 ) 0 ), ${-} );
	call assert( <( 0 1 ), ${-} );
	call assert( =( <( 1 1 ) 0 ), ${-} );
	call assert( <e( 0 1 ), ${-} );
	call assert( <e( 1 1 ), ${-} );
	call assert( =( <e( 1 0 ) 0 ), ${-} );
	call assert( >( 1 0 ), ${-} );
	call assert( =( >( 1 1 ) 0 ), ${-} );
	call assert( >e( 1 0 ), ${-} );
	call assert( >e( 1 1 ), ${-} );
	call assert( =( >e( 0 1 ) 0 ), ${-} );
	call assert( =( &( 1 2 ) 0 ), ${-} );
	call assert( =( &( 2 2 ) 2 ), ${-} );
	call assert( =( |( 1 2 ) 3 ), ${-} );
	call assert( =( ^( 1 0 ) 1 ), ${-} );
	call assert( =( ^( 1 1 ) 0 ), ${-} );
	call assert( ~( 0 ), ${-} );
}

function testlogic() {
	var err;
	try { call !( except( ${-} ) ); } catch err {}
	call assert( err, ${-} );
	call assert( =( !( 0 ) 1 ), ${-} );
	call assert( =( !( 1 ) 0 ), ${-} );
	call assert( =( !( "" ) 0 ), ${-} );
	let err = 0;
	try { call &&( except( ${ 1 } ) except( ${ 2 } ) ); } catch err {}
	call assert( =( $cmp( err "1" ) 0 ), ${-} );
	let err = 0;
	try { call &&( 1 except( ${-} ) ); } catch err {}
	call assert( err, ${-} );
	call assert( =( &&( 0 0 ) 0 ), ${-} );
	call assert( =( &&( 0 1 ) 0 ), ${-} );
	call assert( =( &&( 1 0 ) 0 ), ${-} );
	call assert( =( &&( 1 1 ) 1 ), ${-} );
	call assert( =( &&( 1 "a" ) 1 ), ${-} );
	call assert( =( &&( "a" 1 ) 1 ), ${-} );
	call assert( =( &&( 0 except( ${-} ) ) 0 ), ${-} );
	let err = 0;
	try { call ||( except( ${ 1 } ) except( ${ 2 } ) ); } catch err {}
	call assert( =( $cmp( err "1" ) 0 ), ${-} );
	let err = 0;
	try { call ||( 0 except( ${-} ) ); } catch err {}
	call assert( err, ${-} );
	call assert( =( ||( 0 0 ) 0 ), ${-} );
	call assert( =( ||( 0 1 ) 1 ), ${-} );
	call assert( =( ||( 1 0 ) 1 ), ${-} );
	call assert( =( ||( 1 1 ) 1 ), ${-} );
	call assert( =( ||( 0 "a" ) 1 ), ${-} );
	call assert( =( ||( "a" 0 ) 1 ), ${-} );
	call assert( =( ||( 1 except( ${-} ) ) 1 ), ${-} );
}

function testcmp() {
	var e;
	try { call $cmp( 0 "" ); } catch e {}
	call assert( e, ${-} );
	let e = 0;
	try { call $chr( "" 0 ); } catch e {}
	call assert( =( $cmp( "0" "0" ) 0 ), ${-} );
	call assert( =( $cmp( STR "*" ) 0 ), ${-} );
	call assert( >( $cmp( "1" "0" ) 0 ), ${-} );
	call assert( <( $cmp( "0" "1" ) 0 ), ${-} );
	call assert( >( $cmp( "aa" "a" ) 0 ), ${-} );
	call assert( <( $cmp( "a" "aa" ) 0 ), ${-} );
	call assert( <( $cmp( "b" "ba" ) 0 ), ${-} );
}

function testcat() {
	call assert( =( $cmp( $cat( 0 ) "0" ) 0 ), ${-} );
	call assert( =( $cmp( $cat( 0 1 ) "01" ) 0 ), ${-} );
	call assert( =( $cmp( $cat( "" 0 ) "0" ) 0 ), ${-} );
	call assert( =( $cmp( $cat( 0 "" ) "0" ) 0 ), ${-} );
	call assert( =( $cmp( $cat( 0 "1" "2" ) "012" ) 0 ), ${-} );
	call assert( =( $cmp( $cat( a ) a ) 0 ), ${-} );
}

function testchr() {
	var e;
	try { call $chr( 0 0 ); } catch e {}
	call assert( e, ${-} );
	let e = 0;
	try { call $chr( "" 0 ); } catch e {}
	call assert( e, ${-} );
	call assert( =( $chr( "~" 0 ) 126 ), ${-} );
}

function testsub() {
	var e;
	try { call $sub( 0 0 0 ); } catch e {}
	call assert( e, ${-} );
	dim [ a 1 ];
	let e = 0;
	try { call $sub( a 1 1 ); } catch e {}
	call assert( e, ${-} );
	let e = 0;
	try { call $sub( "a" 1 1 ); } catch e {}
	call assert( e, ${-} );
	let e = 0;
	try { call $sub( "a" -1 1 ); } catch e {}
	call assert( e, ${-} );
	let e = 0;
	try { call $sub( "a" 0 -1 ); } catch e {}
	call assert( e, ${-} );
	call assert( =( $cmp( $sub( "abc" 1 1 ) "b" ) 0 ), ${-} );
	let a = ${ 65, 66, 67 };
	call assert( =( $cmp( $sub( a 0 3 ) "ABC" ) 0 ), ${-} );
}

function testasc() {
	call assert( =( $cmp( $asc( 126 ) "~" ) 0 ), ${-} );
}

function testhex() {
	call assert( =( $cmp( $hex(  0x00000000 ) " 0x00000000" ) 0 ), ${-} );
	call assert( =( $cmp( $hex( -0x00000001 ) "-0x00000001" ) 0 ), ${-} );
	call assert( =( $cmp( $hex( -0x80000000 ) "-0x80000000" ) 0 ), ${-} );
}

function testint() {
	var e;
	call assert( =( $int( "1" ) 1 ), ${-} );
	call assert( =( $int( "0xA" ) 10 ), ${-} );
	call assert( =( $int( "010" ) 8 ), ${-} );
	try{ call $int( "a" ); } catch e {}
	call assert( e, ${-} );
	let e = 0;
	try{ call $int( e ); } catch e {}
	call assert( e, ${-} );
}

function testlen() {
	var e;
	call assert( =( $len( "" ) 0 ), ${-} );
	call assert( =( $len( "a" ) 1 ), ${-} );
	dim [ a 1 ];
	call assert( =( $len( a ) 1 ), ${-} );
	try{ call $len( 0 ); } catch e {}
	call assert( e, ${-} );
}

function testtup() {
	var t;
	let t = $tup( $cat( "a" "b" ), +( 1 2 ) );
	call assert( =( t 3 ), ${-} );
	call assert( =( $cmp( t, "ab" ) 0 ), ${-} );
}

function testfile() {
	var f;
	let f = $load( "test.tt" );
	call assert( =( $len( f ) $flen( "test.tt" ) ), ${-} );
	call assert( =( $cmp( $parse( f ) "rem" ) 0 ), ${-} );
}

function testargs() {
	call assert( >( $argc 0 ), ${-} );
	call assert( =( $cmp( $argv( 0 ) "test.tt" ) 0 ), ${-} );
}

function testtime() {
	call assert( =( $len( $time ) 25 ), ${-} );
}

function testchild() {
	var e;
	call assert( =( $cmp( $child( ${ ( a ) } ), "a" ) 0 ), ${-} );
	call assert( =( $cmp( $child( ELE ), "*" ) 0 ), ${-} );
	try { call $child( 0 ); } catch e {}
	call assert( e, ${-} );
}

function testnext() {
	var e;
	call assert( =( $cmp( $next( ${ 0 a } ), "a" ) 0 ), ${-} );
	try { call $next( 0 ); } catch e {}
	call assert( e, ${-} );
}

function testline() {
	var x, y, e;
	let x = $line( ${-} );
	let y = $line( ${-} );
	call assert( =( -( y x ) 1 ), ${-} );
	try { call $line( a ); } catch e {}
	call assert( e, ${-} );
}

function testquote() {
	var s;
	let s = $quote( $str( "\"\\" $asc( 127 ) ) );
	call assert( =( $cmp( s, "\"\\\"\\\\\\177\"" ) 0 ), ${-} );
}

function testunquote() {
	var s;
	let s = $unquote( "\"\\\\\\176\"" );
	call assert( =( $cmp( s, "\\~" ) 0 ), ${-} );
}

program test {
	call hello();
	call assert( =( testvoid() 0 ), ${-} );
	call assert( =( testvars( ONE ) ONE ), ${-} );
	call testarray();
	call assert( =( fact( 3 ) 6 ), ${-} );
	call testswitch();
	call testif();
	call testwhile();
	call testtry();
	call testinfix();
	call testarith();
	call testlogic();
	call testcmp();
	call testcat();
	call testchr();
	call testsub();
	call testasc();
	call testhex();
	call testint();
	call testlen();
	call testtup();
	call testfile();
	call testargs();
	call testtime();
	call testchild();
	call testnext();
	call testline();
	call testquote();
	call testunquote();

	print "Tests passed.";
}
