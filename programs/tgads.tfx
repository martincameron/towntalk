
array palette, charset, listitems, background;

array tg_zorder, tg_type, tg_parent;
array tg_x, tg_y, tg_w, tg_h, tg_min, tg_anchor, tg_mode, tg_link, tg_a, tg_b, tg_c;

global tg_selx, tg_sely, tg_focus;

function tg_charset( str ) {
	var w, h, clr, chr, y, x;
	var stride, stroff, chroff;
	let stride = 9;
	if <( $chr( str 9 ) 32 ) {
		let stride = 10;
	}
	let w = *( 8 96 );
	let h = *( 16 $len( palette ) );
	dim [ charset 0 ];
	dim [ charset *( w h ) ];
	let clr = 0;
	while <( clr $len( palette ) ) {
		let stroff = 0;
		let chr = 1;
		while <( chr 95 ) {
			let chroff = +( *( clr *( w 16 ) ) *( chr 8 ) );
			let y = 0;
			while <( y 16 ) {
				let x = 0;
				while <( x 8 ) {
					if >( $chr( str +( stroff x ) ) 32 ) {
						set [ charset +( chroff x ) ] = +( *( [ palette clr ] 256 ) 255 );
					}
					inc x;
				}
				let stroff = +( stroff stride );
				let chroff = +( chroff w );
				inc y;
			}
			inc chr;
		}
		inc clr;
	}
	fxsurface 0, w, h, charset;
}

function tg_text( text, x, y, clr ) {
	var idx, len;
	let len = $len( text );
	while <( idx len ) {
		fxblit 0, *( -( $chr( text idx ) 32 ) 8 ), *( clr 16 ), 8, 16, +( x *( idx 8 ) ), y;
		inc idx;
	}
}

function tg_box( x, y, w, h, c1, c2 ) {
	fxrect x, y, 2, h, c1;
	fxrect +( x -( w 2 ) ), y, 2, h, c2;
	fxrect x, y, -( w 1 ), 2, c1;
	fxrect +( x 1 ), +( y -( h 2 ) ), -( w 1 ), 2, c2;
}

function tg_raise_box( x, y, w, h ) {
	call tg_box( x, y, w, h, [ palette 1 ], [ palette 0 ] );
}

function tg_lower_box( x, y, w, h ) {
	call tg_box( x, y, w, h, [ palette 0 ], [ palette 1 ] );
}

function tg_bevel_box( x, y, w, h ) {
	call tg_box( x, y, w, h, [ palette 1 ], [ palette 0 ] );
	call tg_box( +( x 2 ), +( y 2 ), -( w 4 ), -( h 4 ), [ palette 0 ], [ palette 1 ] );
}

function tg_resize( n, x, y, w, h ) {
	var g, k, a;
	if <( w [ tg_min n ] ) {
		let w = [ tg_min n ];
	}
	if <( h [ tg_min n ] ) {
		let h = [ tg_min n ];
	}
	if =( [ tg_type n ] 1 ) {
		while <( g $len( tg_type ) ) {
			if =( [ tg_parent g ] n ) {
				let k = [ tg_anchor g ];
				if &( k 4 ) {
					if &( k 1 ) {
						let a = +( [ tg_h g ] -( h [ tg_h n ] ) );
						if <( a [ tg_min g ] ) {
							let a = [ tg_min g ];
						}
						set [ tg_h g ] = a;
					} else {
						set [ tg_y g ] = +( [ tg_y g ] -( h [ tg_h n ] ) );
					}
				}
				if &( k 8 ) {
					if &( k 2 ) {
						let a = +( [ tg_w g ] -( w [ tg_w n ] ) );
						if <( a [ tg_min g ] ) {
							let a = [ tg_min g ];
						}
						set [ tg_w g ] = a;
					} else {
						set [ tg_x g ] = +( [ tg_x g ] -( w [ tg_w n ] ) );
					}
				}
			}
			inc g;
		}
	}
	set [ tg_x n ] = x;
	set [ tg_y n ] = y;
	set [ tg_w n ] = w;
	set [ tg_h n ] = h;
}

function tg_minsize( n, size ) {
	set [ tg_min n ] = size;
}

function tg_anchors( n, top, left, bottom, right ) {
	var a;
	if top { let a = |( a 1 ); }
	if left { let a = |( a 2 ); }
	if bottom { let a = |( a 4 ); }
	if right { let a = |( a 8 ); }
	set [ tg_anchor n ] = a;
}

function tg_window( n, parent, x, y, w, h, text ) {
	set [ tg_type n ] = 1;
	set [ tg_parent n ] = parent;
	set [ tg_min n ] = 16;
	set [ tg_mode n ] = 1;
	call tg_resize( n, x, y, w, h );
	set [ tg_a n ] = text;
}

function tg_button( n, parent, x, y, w, h, text ) {
	call tg_window( n, parent, x, y, w, h, text );
	set [ tg_type n ] = 2;
}

function tg_vslider( n, parent, x, y, w, h, page, count ) {
	call tg_window( n, parent, x, y, w, h, 0 );
	set [ tg_type n ] = 3;
	set [ tg_b n ] = page;
	set [ tg_c n ] = count;
}

function tg_hslider( n, parent, x, y, w, h, page, count ) {
	call tg_window( n, parent, x, y, w, h, 0 );
	set [ tg_type n ] = 7;
	set [ tg_b n ] = page;
	set [ tg_c n ] = count;
}

function tg_textbox( n, parent, x, y, w, h, text ) {
	call tg_window( n, parent, x, y, w, h, text );
	set [ tg_type n ] = 4;
}

function tg_sizegad( n, parent, x, y, w, h ) {
	call tg_window( n, parent, x, y, w, h, 0 );
	call tg_anchors( n, 0, 0, 1, 1 );
	set [ tg_type n ] = 5;
}

function tg_listbox( n, parent, x, y, w, h, list, slider ) {
	call tg_window( n, parent, x, y, w, h, list );
	set [ tg_type n ] = 6;
	if >( slider 0 ) {
		set [ tg_link n ] = slider;
		set [ tg_link slider ] = n;
	}
}

function tg_init( gadcount ) {
	var idx;
	dim [ tg_zorder gadcount ];
	dim [ tg_type gadcount ];
	dim [ tg_parent gadcount ];
	dim [ tg_x gadcount ];
	dim [ tg_y gadcount ];
	dim [ tg_w gadcount ];
	dim [ tg_h gadcount ];
	dim [ tg_min gadcount ];
	dim [ tg_anchor gadcount ];
	dim [ tg_mode gadcount ];
	dim [ tg_link gadcount ];
	dim [ tg_a gadcount ];
	dim [ tg_b gadcount ];
	dim [ tg_c gadcount ];
	while <( idx gadcount ) {
		set [ tg_zorder idx ] = idx;
		inc idx;
	}
}

function tg_draw_background() {
	var y, h;
	let h = $len( background );
	while <( y h ) {
		fxrect 0, *( y 2 ), 640, 2, [ background y ];
		inc y;
	}
	fxblit 0, 0, 0, 640, 480, 0, 128;
}

function tg_getx( n ) {
	var x;
	let x = [ tg_x n ];
	if >( n 0 ) {
		let x = +( x tg_getx( [ tg_parent n ] ) );
	}
	return x;
}

function tg_gety( n ) {
	var y;
	let y = [ tg_y n ];
	if >( n 0 ) {
		let y = +( y tg_gety( [ tg_parent n ] ) );
	}
	return y;
}

function tg_draw_window( n ) {
	var x, y, w, h;
	let x = tg_getx( n );
	let y = tg_gety( n );
	let w = [ tg_w n ];
	let h = [ tg_h n ];
	fxrect x, y, w, 26, [ palette 2 ];
	fxrect x, +( y 26 ), w, -( h 26 ), [ palette 3 ];
	call tg_raise_box( x, y, w, h );
	call tg_lower_box( +( x 2 ), +( y 24 ), -( w 4 ), -( h 26 ) );
	call tg_text( [ tg_a n ], +( x 6 ), +( y 6 ), 0 );
}

function tg_slider_size( n, p ) {
	return +( /( *( -( p 12 ) [ tg_b n ] ) [ tg_c n ] ) 8 );
}

function tg_slider_offset( n, p ) {
	return /( *( -( p 12 ) [ tg_a n ] ) [ tg_c n ] );
}

function tg_draw_vslider( n ) {
	var x, y, w, h, s, d;
	let x = tg_getx( n );
	let y = tg_gety( n );
	let w = [ tg_w n ];
	let h = [ tg_h n ];
	let s = tg_slider_size( n, h );
	let d = tg_slider_offset( n, h );
	fxrect x, y, w, h, [ palette 3 ];
	call tg_lower_box( x, y, w, h );
	fxrect +( x, 2 ), +( +( y d ) 2 ), -( w 4 ), s, [ palette 2 ];
	call tg_raise_box( +( x, 2 ), +( +( y d ) 2 ), -( w 4 ), s );
}

function tg_draw_hslider( n ) {
	var x, y, w, h, s, d;
	let x = tg_getx( n );
	let y = tg_gety( n );
	let w = [ tg_w n ];
	let h = [ tg_h n ];
	let s = tg_slider_size( n, w );
	let d = tg_slider_offset( n, w );
	fxrect x, y, w, h, [ palette 3 ];
	call tg_lower_box( x, y, w, h );
	fxrect +( +( x d ) 2 ), +( y, 2 ), s, -( h 4 ), [ palette 2 ];
	call tg_raise_box( +( +( x d ) 2 ), +( y, 2 ), s, -( h 4 ) );
}

function tg_draw_button( n ) {
	var x, y, bg, hl, sh;
	let x = tg_getx( n );
	let y = tg_gety( n );
	if =( [ tg_b n ] 1 ) {
		let bg = 3;
		let hl = 0;
		let sh = 1;
	} else {
		let bg = 2;
		let hl = 1;
		let sh = 0;
	}
	fxrect x, y, [ tg_w n ], [ tg_h n ], [ palette bg ];
	call tg_box( x, y, [ tg_w n ], [ tg_h n ],
		[ palette hl ], [ palette sh ] );
	call tg_text( [ tg_a n ],
		+( x /( -( [ tg_w n ] *( $len( [ tg_a n ] ) 8 ) ) 2 ) ),
		+( y /( -( [ tg_h n ] 14 ) 2 ) ), sh );
}

function tg_draw_textbox( n ) {
	var x, y, t, c;
	let x = tg_getx( n );
	let y = tg_gety( n );
	let t = [ tg_a n ];
	let c = /( -( [ tg_w n ] 16 ) 8 );
	if >( $len( t ) c ) {
		let t = $sub( t, -( $len( t ) c ), c );
	}
	fxrect x, y, [ tg_w n ], [ tg_h n ], [ palette 2 ];
	if =( [ tg_b n ] 1 ) {
		fxrect +( x *( +( $len( t ) 1 ) 8 ) ), +( y 6 ), 8, 16, [ palette 3 ];
	}
	call tg_box( x, y, [ tg_w n ], [ tg_h n ], [ palette 1 ], [ palette 0 ] );
	call tg_box( +( x 2 ), +( y 2 ), -( [ tg_w n ] 4 ), -( [ tg_h n ] 4 ),
		[ palette 0 ], [ palette 1 ] );
	call tg_text( t, +( x 8 ), +( y 6 ), 0 );
}

function tg_draw_sizegad( n ) {
	var x, y;
	let x = tg_getx( n );
	let y = tg_gety( n );
	fxrect x, y, [ tg_w n ], [ tg_h n ], [ palette 2 ];
	call tg_box( x, y, [ tg_w n ], [ tg_h n ], [ palette 1 ], [ palette 0 ] );
}

function tg_draw_listbox( n ) {
	var x, y, tw, th, idx, end, ty, tc, txt;
	if >( [ tg_link n ] 0 ) {
		call tg_listbox_scroll( n, [ tg_link n ] );
		call tg_draw( [ tg_link n ] );
	}
	let x = tg_getx( n );
	let y = tg_gety( n );
	fxrect x, y, [ tg_w n ], [ tg_h n ], [ palette 2 ];
	call tg_box( x, y, [ tg_w n ], [ tg_h n ], [ palette 0 ], [ palette 1 ] );
	let tw = /( -( [ tg_w n ] 16 ) 8 );
	let th = /( -( [ tg_h n ] 12 ) 16 );
	if >( +( [ tg_b n ] th ) $len( [ tg_a n ] ) ) {
		let th = -( $len( [ tg_a n ] ) [ tg_b n ] );
	}
	let ty = +( y 6 );
	let idx = [ tg_b n ];
	let end = +( idx th );
	while <( idx end ) {
		let tc = 0;
		if =( [ tg_c n ] idx ) {
			fxrect +( x 8 ), ty, -( [ tg_w n ] 16 ), 16, [ palette 3 ];
			let tc = 1;
		}
		let txt = [ [ tg_a n ] idx ];
		if >( $len( txt ) tw ) {
			let txt = $sub( txt, 0, tw );
		}
		call tg_text( txt, +( x 8 ), ty, tc );
		let ty = +( ty 16 );
		inc idx;
	}
}

function tg_draw( n ) {
	var type, mode, idx, len;
	if <( n 1 ) {
		let type = 1;
		let mode = 1;
	} else {
		let type = [ tg_type n ];
		let mode = [ tg_mode n ];
	}
	if >( mode 0 ) {
		switch type {
			case 1 {
				if <( n 1 ) {
					call tg_draw_background();
				} else {
					call tg_draw_window( n );
				}
				let idx = 1;
				let len = $len( tg_zorder );
				while <( idx len ) {
					if =( [ tg_parent [ tg_zorder idx ] ] n ) {
						call tg_draw( [ tg_zorder idx ] );
					}
					inc idx;
				}
			}
			case 2 { call tg_draw_button( n ); }
			case 3 { call tg_draw_vslider( n ); }
			case 4 { call tg_draw_textbox( n ); }
			case 5 { call tg_draw_sizegad( n ); }
			case 6 { call tg_draw_listbox( n ); }
			case 7 { call tg_draw_hslider( n ); }
		}
	}
}

function tg_listbox_scroll( listbox, slider ) {
	# Adjust slider to listbox size (if changed).
	set [ tg_b slider ] = /( -( [ tg_h listbox ] 12 ) 16 );
	set [ tg_c slider ] = $len( [ tg_a listbox ] );
	if >( [ tg_b slider ] [ tg_c slider ] ) {
		set [ tg_b slider ] = [ tg_c slider ];
	}
	if >( +( [ tg_a slider ] [ tg_b slider ] ) [ tg_c slider ] ) {
		set [ tg_a slider ] = -( [ tg_c slider ] [ tg_b slider ] );
	}
	if <( [ tg_a slider ] 0 ) {
		set [ tg_a slider ] = 0;
	}
	# Set listbox offset.
	set [ tg_b listbox ] = [ tg_a slider ];
}

function tg_find( x, y, p ) {
	var n, idx, len, g, x0, y0, x1, y1, mode, wins;
	let n = p;
	let len = $len( tg_zorder );
	let idx = 1;
	while <( idx len ) {
		let g = [ tg_zorder idx ];
		if &&( =( [ tg_parent g ] p ) >( [ tg_mode g ] 0 ) ) {
			if <( mode [ tg_mode g ] ) {
				let mode = [ tg_mode g ];
			}
			if =( [ tg_type g ] 1 ) {
				inc wins;
			}
		}
		inc idx;
	}
	let idx = 1;
	while <( idx len ) {
		let g = [ tg_zorder idx ];
		if &&( =( [ tg_parent g ] p ) >( [ tg_mode g ] 0 ) ) {
			let x0 = [ tg_x g ];
			let y0 = [ tg_y g ];
			let x1 = +( x0 [ tg_w g ] );
			let y1 = +( y0 [ tg_h g ] );
			if &&( &&( >e( x x0 ) >e( y y0 ) ) &&( <( x x1 ) <( y y1 ) ) ) {
				if =( [ tg_mode g ] mode ) {
					if =( [ tg_type g ] 1 ) {
						let n = tg_find( -( x x0 ), -( y y0 ), g );
					} else {
						if ||( >( [ tg_parent g ] 0 ) =( wins 0 ) ) {
							let n = g;
						}
					}
				}
			}
		}
		inc idx;
	}
	return n;
}

function tg_wintofront( n ) {
	var idx, end, g;
	while >( [ tg_type n ] 1 ) {
		let n = [ tg_parent n ];
	}
	let end = -( $len( tg_zorder ) 1 );
	if &&( >( n 0 ) !( =( [ tg_zorder end ] n ) ) ) {
		let idx = 1;
		while <( idx $len( tg_zorder ) ) {
			let g = [ tg_zorder -( idx 1 ) ];
			if =( g n ) {
				set [ tg_zorder -( idx 1 ) ] = [ tg_zorder idx ];
				set [ tg_zorder idx ] = g;
			}
			inc idx;
		}
		call tg_draw( [ tg_zorder end ] );
	}
	return n;
}

function tg_scan( event ) {
	var n, s, o, p, e, t, c, w, x, y, selected;
	switch event {
		case FX_MOUSEMOTION {
			if =( $mousekey 1 ) {
				if =( tg_selx 0 ) {
					let tg_selx = $xmouse;
					let tg_sely = $ymouse;
				}
				let n = tg_find( tg_selx, tg_sely, 0 );
				let w = tg_wintofront( n );
				switch [ tg_type n ] {
					case 1 {
						let x = $xmouse;
						let y = $ymouse;
						set [ tg_x n ] = -( +( [ tg_x n ] x ) tg_selx );
						set [ tg_y n ] = -( +( [ tg_y n ] y ) tg_sely );
						let tg_selx = x;
						let tg_sely = y;
						call tg_draw( 0 );
					}
					case 2 {
						if =( tg_find( $xmouse, $ymouse, 0 ) n ) {
							set [ tg_b n ] = 1;
						} else {
							set [ tg_b n ] = 0;
						}
						call tg_draw( n );
					}
					case 3 {
						let s = tg_slider_size( n, [ tg_h n ] );
						let o = tg_slider_offset( n, [ tg_h n ] );
						let e = -( -( [ tg_h n ] 4 ) s );
						let y = +( +( tg_gety( n ) o ) 2 );
						if &&( >( tg_sely y ) <( tg_sely +( y s ) ) ) {
							let p = +( o -( $ymouse tg_sely ) );
							if <( p 0 ) {
								let p = 0;
							}
							if >( p e ) {
								let p = e;
							}
							if >( p 0 ) {
								set [ tg_a n ] = /( *( p -( [ tg_c n ] [ tg_b n ] ) ) e );
							} else {
								set [ tg_a n ] = 0;
							}
							let tg_sely = +( tg_sely -( tg_slider_offset( n, [ tg_h n ] ) o ) );
							let selected = n;
							if >( [ tg_link n ] 0 ) {
								call tg_draw( [ tg_link n ] );
							} else {
								call tg_draw( n );
							}
						}
					}
					case 5 {
						let x = $xmouse;
						let y = $ymouse;
						let o = -( tg_selx tg_getx( n ) );
						let p = -( tg_sely tg_gety( n ) );
						call tg_resize( w, [ tg_x w ], [ tg_y w ], 
							-( +( [ tg_w w ] x ) tg_selx ),
							-( +( [ tg_h w ] y ) tg_sely ) );
						let tg_selx = +( tg_getx( n ) o );
						let tg_sely = +( tg_gety( n ) p );
						let selected = w;
						call tg_draw( 0 );
					}
					case 7 {
						let s = tg_slider_size( n, [ tg_w n ] );
						let o = tg_slider_offset( n, [ tg_w n ] );
						let e = -( -( [ tg_w n ] 4 ) s );
						let x = +( +( tg_getx( n ) o ) 2 );
						if &&( >( tg_selx x ) <( tg_selx +( x s ) ) ) {
							let p = +( o -( $xmouse tg_selx ) );
							if <( p 0 ) {
								let p = 0;
							}
							if >( p e ) {
								let p = e;
							}
							if >( p 0 ) {
								set [ tg_a n ] = /( *( p -( [ tg_c n ] [ tg_b n ] ) ) e );
							} else {
								set [ tg_a n ] = 0;
							}
							let tg_selx = +( tg_selx -( tg_slider_offset( n, [ tg_w n ] ) o ) );
							let selected = n;
							call tg_draw( n );
						}
					}
				}
			}
		}
		case FX_MOUSEKEYDOWN {
			let tg_selx = 0;
			let tg_sely = 0;
			if =( $mousekey 1 ) {
				let tg_selx = $xmouse;
				let tg_sely = $ymouse;
				let n = tg_find( tg_selx, tg_sely, 0 );
				if =( [ tg_type tg_focus ] 4 ) {
					set [ tg_b tg_focus ] = 0;
					call tg_draw( tg_focus );
				}
				let tg_focus = n;
				let w = tg_wintofront( n );
				switch [ tg_type n ] {
					case 2 {
						set [ tg_b n ] = 1;
						call tg_draw( n );
					}
					case 3 {
						let s = tg_slider_size( n, [ tg_h n ] );
						let o = tg_slider_offset( n, [ tg_h n ] );
						let e = -( -( [ tg_h n ] 4 ) s );
						let y = +( +( tg_gety( n ) o ) 2 );
						if <( tg_sely y ) {
							let t = -( [ tg_a n ] [ tg_b n ] );
							if <( t 0 ) {
								let t = 0;
							}
							set [ tg_a n ] = t;
							let selected = n;
							if >( [ tg_link n ] 0 ) {
								call tg_draw( [ tg_link n ] );
							} else {
								call tg_draw( n );
							}
						}
						if >( tg_sely +( y s ) ) {
							let t = +( [ tg_a n ] [ tg_b n ] );
							if >( t -( [ tg_c n ] [ tg_b n ] ) ) {
								let t = -( [ tg_c n ] [ tg_b n ] );
							}
							set [ tg_a n ] = t;
							let selected = n;
							if >( [ tg_link n ] 0 ) {
								call tg_draw( [ tg_link n ] );
							} else {
								call tg_draw( n );
							}
						}
					}
					case 4 {
						set [ tg_b n ] = 1;
						call tg_draw( n );
					}
					case 6 {
						let s = +( [ tg_b n ] /( -( tg_sely +( tg_gety( n ) 6 ) ) 16 ) );
						if <( s $len( [ tg_a n ] ) ) {
							set [ tg_c n ] = s;
						}
						let selected = n;
						call tg_draw( n );
					}
					case 7 {
						let s = tg_slider_size( n, [ tg_w n ] );
						let o = tg_slider_offset( n, [ tg_w n ] );
						let e = -( -( [ tg_w n ] 4 ) s );
						let x = +( +( tg_getx( n ) o ) 2 );
						if <( tg_selx x ) {
							let t = -( [ tg_a n ] [ tg_b n ] );
							if <( t 0 ) {
								let t = 0;
							}
							set [ tg_a n ] = t;
							let selected = n;
							call tg_draw( n );
						}
						if >( tg_selx +( x s ) ) {
							let t = +( [ tg_a n ] [ tg_b n ] );
							if >( t -( [ tg_c n ] [ tg_b n ] ) ) {
								let t = -( [ tg_c n ] [ tg_b n ] );
							}
							set [ tg_a n ] = t;
							let selected = n;
							call tg_draw( n );
						}
					}
				}
			}
		}
		case FX_MOUSEKEYUP {
			if ||( tg_selx tg_sely ) {
				let n = tg_find( tg_selx, tg_sely, 0 );
				if =( [ tg_type n ] 2 ) {
					set [ tg_b n ] = 0;
					call tg_draw( n );
					if =( tg_find( $xmouse, $ymouse, 0 ) n ) {
						let selected = n;
					}
				}
				let tg_selx = 0;
				let tg_sely = 0;
			}
		}
		case FX_KEYDOWN {
			if =( [ tg_type tg_focus ] 4 ) {
				let t = [ tg_a tg_focus ];
				let c = $keyboard;
				if =( c 8 ) {
					if >( $len( t ) 0 ) {
						if &( $keyshift 3 ) {
							let t = "";
						} else {
							let t = $sub( t, 0, -( $len( t ) 1 ) );
						}
						set [ tg_a tg_focus ] = t;
					}
				} else {
					if >( c 31 ) {
						if &( $keyshift 3 ) {
							if <( c 64 ) {
								let c = $chr( " !\"~$%&@()*+<_>?)!\"#$%^&*(::<+>?@", -( c 32 ) );
							} else {
								if <( c 96 ) {
									let c = +( c 32 );
								} else {
									let c = -( c 32 );
								}
							}
						}
						if <( c 127 ) {
							set [ tg_a tg_focus ] = $str( t, $asc( c ) );
						}
					}
				}
				let selected = tg_focus;
				call tg_draw( tg_focus );
			}
		}
	}
	return selected;
}

function gradient( c1, c2, out, off, len ) {
	var r1, r2, g1, g2, b1, b2, r, g, b, idx;
	let r1 = &( >>( c1 16 ) 0xFF );
	let r2 = &( >>( c2 16 ) 0xFF );
	let g1 = &( >>( c1 8 ) 0xFF );
	let g2 = &( >>( c2 8 ) 0xFF );
	let b1 = &( c1 0xFF );
	let b2 = &( c2 0xFF );
	while <( idx len ) {
		let r = +( r1 /( *( -( r2 r1 ) idx ) len ) );
		let g = +( g1 /( *( -( g2 g1 ) idx ) len ) );
		let b = +( b1 /( *( -( b2 b1 ) idx ) len ) );
		set [ out +( off idx ) ] = +( *( r 65536 ) +( *( g 256 ) b ) );
		inc idx;
	}
}

function parse_rws( rws, out ) {
	var elem, idx, c, r, g, b;
	let elem = $parse( rws );
	if !( $cmp( elem, "RW.SCN" ) ) {
		let elem = $next( elem );
		while $cmp( elem, "EOF" ) {
			if <( idx $len( out ) ) {
				let c = $int( elem );
				let r = *( &( >>( c 8 ) 0xF ) 17 );
				let g = *( &( >>( c 4 ) 0xF ) 17 ); 
				let b = *( &( c 0xF ) 17 ); 
				set [ out idx ] = +( *( r 65536 ) +( *( g 256 ) b ) );
				inc idx;
			}
			let elem = $next( elem );
		}
	} else {
		throw "Not an RWS file.";
	}
}

function sort( vals ) {
	var progress, idx, tmp;
	let progress = TRUE;
	while progress {
		let idx = 1;
		let progress = FALSE;
		while <( idx $len( vals ) ) {
			let tmp = [ vals -( idx 1 ) ];
			if >( $cmp( tmp [ vals idx ] ) 0 ) {
				set [ vals -( idx 1 ) ] = [ vals idx ];
				set [ vals idx ] = tmp;
				let progress = TRUE;
			}
			inc idx;
		}
	}
}

program tgads {
	var selected;
	let palette = $array( ${ 0x000000, 0xFFFFFF, 0xA0A0A0, 0x6080B0 } );

	dim [ background 240 ];
	call parse_rws( $load( $str( $path( $src ) "rws/demo5.rws" ) ), background );
	#call gradient( 0x008000, 0x000080, background, 0, 240 );

	call tg_charset( $load( $str( $path( $src ) "topaz8.txt" ) ) );

	fxopen 640, 480, "tgads";

	call tg_init( 25 );

	call tg_button( 1, 0, 10, 32, 80, 26, "Windows" );

	call tg_window( 2, 0, 10, 10, 200, 100, "Window 2" );
	call tg_button( 3, 2, 10, 32, 80, 26, "Button 3" );
	call tg_button( 4, 2, 10, 64, 80, 26, "Close" );

	call tg_window( 10, 0, 40, 40, 200, 200, "Window 10" );
	call tg_minsize( 10, 64 );
	call tg_sizegad( 11, 10, 180, 180, 16, 16 );
	call tg_hslider( 12, 10, 10, 170, 160, 20, 5, 15 );
	call tg_anchors( 12, 0, 1, 1, 1 );

	call tg_window( 15, 0, 30, 30, 400, 200, "Files" );
	call tg_minsize( 15, 150 );
	call tg_button( 16, 15, 10, 32, 80, 26, "Close" );
	call tg_vslider( 17, 15, 370, 32, 20, 120, 5, 15 );
	call tg_anchors( 17, 1, 0, 1, 1 );
	call tg_textbox( 18, 15, 10, 64, 80, 28, "Text 9" );
	call tg_textbox( 19, 15, 100, 160, 260, 28, "Text 10" );
	call tg_anchors( 19, 0, 1, 1, 1 );
	call tg_sizegad( 20, 15, 380, 180, 16, 16 );

	let listitems = $array( $fxdir( "." ) );
	call sort( listitems );

	call tg_listbox( 21, 15, 100, 32, 260, 120, listitems, 17 );
	call tg_anchors( 21, 1, 1, 1, 1 );
	call tg_listbox_scroll( 21, 17 );
	
	set [tg_mode 2] = 0;
	set [tg_mode 4] = 2;
	set [tg_mode 10] = 0;
	set [tg_mode 15] = 0;
	
	call tg_draw( 0 );
	fxshow;

	while TRUE {
		let selected = tg_scan( $fxwait );
		if >( selected 0 ) {
			print $cat( selected, " ", [ tg_a selected ] );
		}
		switch selected {
			case 1 {
				set [tg_mode 2] = 1;
				set [tg_mode 10] = 1;
				set [tg_mode 15] = 2;
				call tg_wintofront( 15 );
				call tg_draw( 0 );
			}
			case 4 {
				set [tg_mode 2] = 0;
				set [tg_mode 10] = 0;
				call tg_draw( 0 );
			}
			case 16 {
				set [tg_mode 15] = 0;
				call tg_draw( 0 );
			}
		}
		fxshow;
	}
}
