
global palette, charset;

global tg_zorder, tg_type, tg_parent;
global tg_x, tg_y, tg_w, tg_h, tg_min;
global tg_anchor, tg_mode, tg_link, tg_action;
global tg_a, tg_b, tg_c;

global tg_update, tg_selx, tg_sely, tg_focus, tg_time, tg_draw_background;
global fs_win, fs_dir, fs_slider, fs_list, fs_file, fs_cancel, fs_okay, fs_path;
global req_win, req_but1, req_but2;

function tg_charset( str ) {
	var w, h, clr, chr, y, x;
	var stride, stroff, chroff;
	let stride = 9;
	if <( $chr( str 9 ) 32 ) {
		let stride = 10;
	}
	let w = *( 8 96 );
	let h = *( 16 $len( palette ) );
	let charset = $array( *( w h ) );
	let clr = 0;
	while <( clr $len( palette ) ) {
		let stroff = 0;
		let chr = 1;
		while <( chr 95 ) {
			let chroff = +( *( clr *( w 16 ) ) *( chr 8 ) );
			let y = 0;
			while <( y 16 ) {
				let x = 0;
				while <( x 8 ) {
					if >( $chr( str +( stroff x ) ) 32 ) {
						set [ charset +( chroff x ) ] = +( *( [ palette clr ] 256 ) 255 );
					}
					inc x;
				}
				let stroff = +( stroff stride );
				let chroff = +( chroff w );
				inc y;
			}
			inc chr;
		}
		inc clr;
	}
	surface 0, w, h, charset;
}

function tg_text( text, x, y, clr ) {
	var idx, len;
	let len = $len( text );
	while <( idx len ) {
		blit 0, *( -( $chr( text idx ) 32 ) 8 ), *( clr 16 ), 8, 16, +( x *( idx 8 ) ), y;
		inc idx;
	}
}

function tg_raise_box( x, y, w, h ) {
	rect x, y, 2, h, [ palette 1 ];
	rect +( x -( w 2 ) ), y, 2, h, [ palette 0 ];
	rect x, y, -( w 1 ), 2, [ palette 1 ];
	rect +( x 1 ), +( y -( h 2 ) ), -( w 1 ), 2, [ palette 0 ];
}

function tg_lower_box( x, y, w, h ) {
	rect x, y, 2, h, [ palette 0 ];
	rect +( x -( w 2 ) ), y, 2, h, [ palette 1 ];
	rect x, y, -( w 1 ), 2, [ palette 0 ];
	rect +( x 1 ), +( y -( h 2 ) ), -( w 1 ), 2, [ palette 1 ];
}

function tg_bevel_box( x, y, w, h ) {
	call tg_raise_box( x, y, w, h );
	call tg_lower_box( +( x 2 ), +( y 2 ), -( w 4 ), -( h 4 ) );
}

function tg_resize( n, x, y, w, h ) {
	var g, k, a;
	if <( w [ tg_min n ] ) {
		let w = [ tg_min n ];
	}
	if <( h [ tg_min n ] ) {
		let h = [ tg_min n ];
	}
	if =( [ tg_type n ] 1 ) {
		while <( g $len( tg_type ) ) {
			if =( [ tg_parent g ] n ) {
				let k = [ tg_anchor g ];
				if &( k 4 ) {
					if &( k 1 ) {
						let a = +( [ tg_h g ] -( h [ tg_h n ] ) );
						if <( a [ tg_min g ] ) {
							let a = [ tg_min g ];
						}
						set [ tg_h g ] = a;
					} else {
						set [ tg_y g ] = +( [ tg_y g ] -( h [ tg_h n ] ) );
					}
				}
				if &( k 8 ) {
					if &( k 2 ) {
						let a = +( [ tg_w g ] -( w [ tg_w n ] ) );
						if <( a [ tg_min g ] ) {
							let a = [ tg_min g ];
						}
						set [ tg_w g ] = a;
					} else {
						set [ tg_x g ] = +( [ tg_x g ] -( w [ tg_w n ] ) );
					}
				}
			}
			inc g;
		}
	}
	set [ tg_x n ] = x;
	set [ tg_y n ] = y;
	set [ tg_w n ] = w;
	set [ tg_h n ] = h;
}

function tg_minsize( n, size ) {
	set [ tg_min n ] = size;
}

function tg_anchors( n, top, left, bottom, right ) {
	var a;
	if top { let a = |( a 1 ); }
	if left { let a = |( a 2 ); }
	if bottom { let a = |( a 4 ); }
	if right { let a = |( a 8 ); }
	set [ tg_anchor n ] = a;
}

function tg_set_action( n, target ) {
	set [ tg_action n ] = target;
}

function tg_window( n, x, y, w, h, text ) {
	set [ tg_type n ] = 1;
	set [ tg_parent n ] = 0;
	set [ tg_min n ] = 16;
	set [ tg_anchor n ] = 0;
	set [ tg_mode n ] = 1;
	call tg_resize( n, x, y, w, h );
	set [ tg_a n ] = text;
}

function tg_button( n, parent, x, y, w, h, text ) {
	call tg_window( n, x, y, w, h, text );
	set [ tg_parent n ] = parent;
	set [ tg_type n ] = 2;
}

function tg_vslider( n, parent, x, y, w, h, page, count ) {
	call tg_window( n, x, y, w, h, 0 );
	set [ tg_parent n ] = parent;
	set [ tg_type n ] = 3;
	set [ tg_b n ] = page;
	set [ tg_c n ] = count;
}

function tg_textbox( n, parent, x, y, w, h, text ) {
	call tg_window( n, x, y, w, h, text );
	set [ tg_parent n ] = parent;
	set [ tg_type n ] = 4;
}

function tg_sizegad( n, parent, x, y, w, h ) {
	call tg_window( n, x, y, w, h, 0 );
	call tg_anchors( n, 0, 0, 1, 1 );
	set [ tg_parent n ] = parent;
	set [ tg_type n ] = 5;
}

function tg_listbox( n, parent, x, y, w, h, list, slider ) {
	call tg_window( n, x, y, w, h, list );
	set [ tg_parent n ] = parent;
	set [ tg_type n ] = 6;
	if >( slider 0 ) {
		set [ tg_link n ] = slider;
		set [ tg_link slider ] = n;
	}
}

function tg_hslider( n, parent, x, y, w, h, page, count ) {
	call tg_window( n, x, y, w, h, 0 );
	set [ tg_parent n ] = parent;
	set [ tg_type n ] = 7;
	set [ tg_b n ] = page;
	set [ tg_c n ] = count;
}

function tg_box( n, parent, x, y, w, h, style, colour, text ) {
	call tg_window( n, x, y, w, h, text );
	set [ tg_parent n ] = parent;
	set [ tg_type n ] = 8;
	set [ tg_b n ] = style;
	set [ tg_c n ] = colour;
}

function tg_label( n, parent, x, y, w, colour, text ) {
	call tg_window( n, x, y, w, 16, text );
	set [ tg_parent n ] = parent;
	set [ tg_type n ] = 9;
	set [ tg_c n ] = colour;
}

function tg_init( gadcount, width, height ) {
	var idx;
	let tg_zorder = $array( gadcount );
	let tg_type = $array( gadcount );
	let tg_parent = $array( gadcount );
	let tg_x = $array( gadcount );
	let tg_y = $array( gadcount );
	let tg_w = $array( gadcount );
	let tg_h = $array( gadcount );
	let tg_min = $array( gadcount );
	let tg_anchor = $array( gadcount );
	let tg_mode = $array( gadcount );
	let tg_link = $array( gadcount );
	let tg_action = $array( gadcount );
	let tg_a = $array( gadcount );
	let tg_b = $array( gadcount );
	let tg_c = $array( gadcount );
	set [ tg_w 0 ] = width;
	set [ tg_h 0 ] = height;
	while <( idx gadcount ) {
		set [ tg_zorder idx ] = idx;
		inc idx;
	}
}

function tg_getx( n ) {
	var x;
	let x = [ tg_x n ];
	if >( n 0 ) {
		let x = +( x tg_getx( [ tg_parent n ] ) );
	}
	return x;
}

function tg_gety( n ) {
	var y;
	let y = [ tg_y n ];
	if >( n 0 ) {
		let y = +( y tg_gety( [ tg_parent n ] ) );
	}
	return y;
}

function tg_draw_window( n ) {
	var x, y, w, h;
	let x = tg_getx( n );
	let y = tg_gety( n );
	let w = [ tg_w n ];
	let h = [ tg_h n ];
	rect x, y, w, 26, [ palette 2 ];
	rect x, +( y 26 ), w, -( h 26 ), [ palette 3 ];
	call tg_raise_box( x, y, w, h );
	call tg_lower_box( +( x 2 ), +( y 24 ), -( w 4 ), -( h 26 ) );
	call tg_text( [ tg_a n ], +( x 6 ), +( y 6 ), 0 );
}

function tg_slider_size( n, p ) {
	return +( /( *( -( p 12 ) [ tg_b n ] ) [ tg_c n ] ) 8 );
}

function tg_slider_offset( n, p ) {
	return /( *( -( p 12 ) [ tg_a n ] ) [ tg_c n ] );
}

function tg_draw_vslider( n ) {
	var x, y, w, h, s, d;
	let x = tg_getx( n );
	let y = tg_gety( n );
	let w = [ tg_w n ];
	let h = [ tg_h n ];
	let s = tg_slider_size( n, h );
	let d = tg_slider_offset( n, h );
	rect x, y, w, h, [ palette 3 ];
	call tg_lower_box( x, y, w, h );
	rect +( x, 2 ), +( +( y d ) 2 ), -( w 4 ), s, [ palette 2 ];
	call tg_raise_box( +( x, 2 ), +( +( y d ) 2 ), -( w 4 ), s );
}

function tg_draw_hslider( n ) {
	var x, y, w, h, s, d;
	let x = tg_getx( n );
	let y = tg_gety( n );
	let w = [ tg_w n ];
	let h = [ tg_h n ];
	let s = tg_slider_size( n, w );
	let d = tg_slider_offset( n, w );
	rect x, y, w, h, [ palette 3 ];
	call tg_lower_box( x, y, w, h );
	rect +( +( x d ) 2 ), +( y, 2 ), s, -( h 4 ), [ palette 2 ];
	call tg_raise_box( +( +( x d ) 2 ), +( y, 2 ), s, -( h 4 ) );
}

function tg_draw_button( n ) {
	var x, y, c;
	let x = tg_getx( n );
	let y = tg_gety( n );
	if =( [ tg_b n ] 1 ) {
		let c = 1;
		rect x, y, [ tg_w n ], [ tg_h n ], [ palette 3 ];
		call tg_lower_box( x, y, [ tg_w n ], [ tg_h n ] );
	} else {
		rect x, y, [ tg_w n ], [ tg_h n ], [ palette 2 ];
		call tg_raise_box( x, y, [ tg_w n ], [ tg_h n ] );
	}
	call tg_text( [ tg_a n ],
		+( x /( -( [ tg_w n ] *( $len( [ tg_a n ] ) 8 ) ) 2 ) ),
		+( y /( -( [ tg_h n ] 14 ) 2 ) ), c );
}

function tg_draw_textbox( n ) {
	var x, y, l, t, p, s;
	let x = tg_getx( n );
	let y = tg_gety( n );
	let t = [ tg_a n ];
	let l = /( -( [ tg_w n ] 16 ) 8 );
	if =( tg_focus n ) {
		let p = [ tg_b n ];
		let s = [ tg_c n ];
	} else {
		if >( $len( t ) l ) {
			let s = -( $len( t ) l );
		}
	}
	if >( s 0 ) {
		let t = $sub( t, s, -( $len( t ) s ) );
	}
	if >( $len( t ) l ) {
		let t = $sub( t, 0, l );
	}
	rect x, y, [ tg_w n ], [ tg_h n ], [ palette 2 ];
	if =( tg_focus n ) {
		rect +( x *( +( -( p s ) 1 ) 8 ) ), +( y 6 ), 8, 16, [ palette 3 ];
	}
	call tg_bevel_box( x, y, [ tg_w n ], [ tg_h n ] );
	call tg_text( t, +( x 8 ), +( y 6 ), 0 );
}

function tg_draw_sizegad( n ) {
	var x, y;
	let x = tg_getx( n );
	let y = tg_gety( n );
	rect x, y, [ tg_w n ], [ tg_h n ], [ palette 2 ];
	call tg_raise_box( x, y, [ tg_w n ], [ tg_h n ] );
}

function tg_draw_listbox( n ) {
	var x, y, tw, th, idx, end, ty, tc, txt;
	if >( [ tg_link n ] 0 ) {
		call tg_listbox_scroll( n, [ tg_link n ] );
		call tg_draw( [ tg_link n ] );
	}
	let x = tg_getx( n );
	let y = tg_gety( n );
	rect x, y, [ tg_w n ], [ tg_h n ], [ palette 2 ];
	call tg_lower_box( x, y, [ tg_w n ], [ tg_h n ] );
	let tw = /( -( [ tg_w n ] 16 ) 8 );
	let th = /( -( [ tg_h n ] 12 ) 16 );
	if >( +( [ tg_b n ] th ) $len( [ tg_a n ] ) ) {
		let th = -( $len( [ tg_a n ] ) [ tg_b n ] );
	}
	let ty = +( y 6 );
	let idx = [ tg_b n ];
	let end = +( idx th );
	while <( idx end ) {
		let txt = [ [ tg_a n ] idx ];
		let tc = $tup( 0, txt );
		if =( [ tg_c n ] idx ) {
			rect +( x 8 ), ty, -( [ tg_w n ] 16 ), 16, [ palette 3 ];
			let tc = 1;
		}
		if >( $len( txt ) tw ) {
			let txt = $sub( txt, 0, tw );
		}
		call tg_text( txt, +( x 8 ), ty, tc );
		let ty = +( ty 16 );
		inc idx;
	}
}

function tg_draw_box( n ) {
	var x, y, t;
	let x = tg_getx( n );
	let y = tg_gety( n );
	if >e( [ tg_c n ] 0 ) {
		rect x, y, [ tg_w n ], [ tg_h n ], [ tg_c n ];
	}
	switch [ tg_b n ] {
		case 1 {
			call tg_raise_box( x, y, [ tg_w n ], [ tg_h n ] );
		}
		case 2 {
			call tg_lower_box( x, y, [ tg_w n ], [ tg_h n ] );
		}
		default {
			call tg_bevel_box( x, y, [ tg_w n ], [ tg_h n ] );
		}
	}
	let t = [ tg_a n ];
	if t {
		if >( *( $len( t ) 8 ) -( [ tg_w n ] 16 ) ) {
			let t = $sub( t, 0, /( -( [ tg_w n ] 16 ) 8 ) );
		}
		call tg_text( t, +( x 8 ), +( y 8 ), =( &( [ tg_c n ] 0x8000 ) 0 ) );
	}
}

function tg_draw_label( n ) {
	var t;
	let t = [ tg_a n ];
	if t {
		if >( *( $len( t ) 8 ) [ tg_w n ] ) {
			let t = $sub( t, 0, /( [ tg_w n ] 8 ) );
		}
		call tg_text( t, tg_getx( n ), tg_gety( n ), [ tg_c n ] );
	}
}

function tg_draw( n ) {
	var type, mode, idx, len;
	if <( n 1 ) {
		let type = 1;
		let mode = 1;
	} else {
		let type = [ tg_type n ];
		let mode = [ tg_mode n ];
	}
	if >( mode 0 ) {
		switch type {
			case 1 {
				if <( n 1 ) {
					if tg_draw_background {
						call :( tg_draw_background );
					} else {
						rect 0, 0, [ tg_w 0 ], [ tg_h 0 ], 0;
					}
				} else {
					call tg_draw_window( n );
				}
				let idx = 1;
				let len = $len( tg_zorder );
				while <( idx len ) {
					if =( [ tg_parent [ tg_zorder idx ] ] n ) {
						call tg_draw( [ tg_zorder idx ] );
					}
					inc idx;
				}
			}
			case 2 { call tg_draw_button( n ); }
			case 3 { call tg_draw_vslider( n ); }
			case 4 { call tg_draw_textbox( n ); }
			case 5 { call tg_draw_sizegad( n ); }
			case 6 { call tg_draw_listbox( n ); }
			case 7 { call tg_draw_hslider( n ); }
			case 8 { call tg_draw_box( n ); }
			case 9 { call tg_draw_label( n ); }
		}
	}
}

function tg_redraw() {
	if tg_update {
		call tg_draw( 0 );
		let tg_update = FALSE;
	}
}

function tg_listbox_scroll( listbox, slider ) {
	# Adjust slider to listbox size (if changed).
	set [ tg_b slider ] = /( -( [ tg_h listbox ] 12 ) 16 );
	set [ tg_c slider ] = $len( [ tg_a listbox ] );
	if >( [ tg_b slider ] [ tg_c slider ] ) {
		set [ tg_b slider ] = [ tg_c slider ];
	}
	if >( +( [ tg_a slider ] [ tg_b slider ] ) [ tg_c slider ] ) {
		set [ tg_a slider ] = -( [ tg_c slider ] [ tg_b slider ] );
	}
	if <( [ tg_a slider ] 0 ) {
		set [ tg_a slider ] = 0;
	}
	# Set listbox offset.
	set [ tg_b listbox ] = [ tg_a slider ];
}

function tg_find( x, y, p ) {
	var n, idx, len, g, x0, y0, x1, y1, mode, wins;
	let n = p;
	let len = $len( tg_zorder );
	let idx = 1;
	while <( idx len ) {
		let g = [ tg_zorder idx ];
		if &&( =( [ tg_parent g ] p ) >( [ tg_mode g ] 0 ) ) {
			if <( mode [ tg_mode g ] ) {
				let mode = [ tg_mode g ];
			}
			if =( [ tg_type g ] 1 ) {
				inc wins;
			}
		}
		inc idx;
	}
	let idx = 1;
	while <( idx len ) {
		let g = [ tg_zorder idx ];
		if &&( =( [ tg_parent g ] p ) >( [ tg_mode g ] 0 ) ) {
			let x0 = [ tg_x g ];
			let y0 = [ tg_y g ];
			let x1 = +( x0 [ tg_w g ] );
			let y1 = +( y0 [ tg_h g ] );
			if &&( &&( >e( x x0 ) >e( y y0 ) ) &&( <( x x1 ) <( y y1 ) ) ) {
				if =( [ tg_mode g ] mode ) {
					if =( [ tg_type g ] 1 ) {
						let n = tg_find( -( x x0 ), -( y y0 ), g );
					} else {
						if ||( >( [ tg_parent g ] 0 ) =( wins 0 ) ) {
							let n = g;
						}
					}
				}
			}
		}
		inc idx;
	}
	return n;
}

function tg_wintofront( n ) {
	var idx, end, g;
	while >( [ tg_type n ] 1 ) {
		let n = [ tg_parent n ];
	}
	let end = -( $len( tg_zorder ) 1 );
	if &&( >( n 0 ) !( =( [ tg_zorder end ] n ) ) ) {
		let idx = 1;
		while <( idx $len( tg_zorder ) ) {
			let g = [ tg_zorder -( idx 1 ) ];
			if =( g n ) {
				set [ tg_zorder -( idx 1 ) ] = [ tg_zorder idx ];
				set [ tg_zorder idx ] = g;
			}
			inc idx;
		}
		let tg_update = TRUE;
	}
	return n;
}

function tg_dispose( n ) {
	var idx, end;
	let idx = 1;
	let end = $len( tg_parent );
	while <( idx end ) {
		if =( [ tg_parent idx ] n ) {
			call tg_dispose( idx );
		}
		inc idx;
	}
	set [ tg_type n ] = 0;
	set [ tg_parent n ] = 0;
	set [ tg_mode n ] = 0;
	set [ tg_link n ] = 0;
	set [ tg_action n ] = 0;
	set [ tg_a n ] = 0;
	set [ tg_b n ] = 0;
	set [ tg_c n ] = 0;
}

function tg_num_unused() {
	var idx, end, num;
	let idx = 1;
	let end = $len( tg_type );
	while <( idx end ) {
		if =( [ tg_type idx ] 0 ) {
			inc num;
		}
		inc idx;
	}
	return num;
}

function tg_unused() {
	var idx, end;
	let idx = 1;
	let end = $len( tg_zorder );
	while <( idx end ) {
		if =( [ tg_type [ tg_zorder idx ] ] 0 ) {
			return [ tg_zorder idx ];
		}
		inc idx;
	}
}

function tg_clamp( value, min, max ) {
	if <( value min ) {
		return min;
	}
	if >( value max ) {
		return max;
	}
	return value;
}

function tg_scan( event ) {
	var n, s, o, p, e, t, c, l, w, x, y, selected;
	var mousex = tg_clamp( $xmouse, 1, -( [ tg_w 0 ] 1 ) );
	var mousey = tg_clamp( $ymouse, 1, -( [ tg_h 0 ] 1 ) );
	switch event {
		case MOUSE_MOTION_EVENT {
			if =( $mousekey 1 ) {
				if =( tg_selx 0 ) {
					let tg_selx = mousex;
					let tg_sely = mousey;
				}
				let n = tg_find( tg_selx, tg_sely, 0 );
				let w = tg_wintofront( n );
				switch [ tg_type n ] {
					case 1 {
						let x = mousex;
						let y = mousey;
						set [ tg_x n ] = -( +( [ tg_x n ] x ) tg_selx );
						set [ tg_y n ] = -( +( [ tg_y n ] y ) tg_sely );
						let tg_selx = x;
						let tg_sely = y;
						let tg_update = TRUE;
					}
					case 2 {
						if =( tg_find( mousex, mousey, 0 ) n ) {
							set [ tg_b n ] = 1;
						} else {
							set [ tg_b n ] = 0;
						}
						let tg_update = TRUE;
					}
					case 3 {
						let s = tg_slider_size( n, [ tg_h n ] );
						let o = tg_slider_offset( n, [ tg_h n ] );
						let e = -( -( [ tg_h n ] 4 ) s );
						let y = +( +( tg_gety( n ) o ) 2 );
						if &&( >( tg_sely y ) <( tg_sely +( y s ) ) ) {
							let p = +( o -( mousey tg_sely ) );
							if <( p 0 ) {
								let p = 0;
							}
							if >( p e ) {
								let p = e;
							}
							if >( p 0 ) {
								set [ tg_a n ] = /( *( p -( [ tg_c n ] [ tg_b n ] ) ) e );
							} else {
								set [ tg_a n ] = 0;
							}
							let tg_sely = +( tg_sely -( tg_slider_offset( n, [ tg_h n ] ) o ) );
							let selected = n;
							let tg_update = TRUE;
						}
					}
					case 5 {
						let x = mousex;
						let y = mousey;
						let o = -( tg_selx tg_getx( n ) );
						let p = -( tg_sely tg_gety( n ) );
						call tg_resize( w, [ tg_x w ], [ tg_y w ], 
							-( +( [ tg_w w ] x ) tg_selx ),
							-( +( [ tg_h w ] y ) tg_sely ) );
						let tg_selx = +( tg_getx( n ) o );
						let tg_sely = +( tg_gety( n ) p );
						let selected = w;
						let tg_update = TRUE;
					}
					case 7 {
						let s = tg_slider_size( n, [ tg_w n ] );
						let o = tg_slider_offset( n, [ tg_w n ] );
						let e = -( -( [ tg_w n ] 4 ) s );
						let x = +( +( tg_getx( n ) o ) 2 );
						if &&( >( tg_selx x ) <( tg_selx +( x s ) ) ) {
							let p = +( o -( mousex tg_selx ) );
							if <( p 0 ) {
								let p = 0;
							}
							if >( p e ) {
								let p = e;
							}
							if >( p 0 ) {
								set [ tg_a n ] = /( *( p -( [ tg_c n ] [ tg_b n ] ) ) e );
							} else {
								set [ tg_a n ] = 0;
							}
							let tg_selx = +( tg_selx -( tg_slider_offset( n, [ tg_w n ] ) o ) );
							let selected = n;
							let tg_update = TRUE;
						}
					}
				}
			}
		}
		case MOUSE_PRESSED_EVENT {
			let tg_selx = 0;
			let tg_sely = 0;
			if =( $mousekey 1 ) {
				let tg_selx = mousex;
				let tg_sely = mousey;
				if tg_focus {
					let t = tg_focus;
					let tg_focus = 0;
					let tg_update = TRUE;
				}
				let n = tg_find( tg_selx, tg_sely, 0 );
				let w = tg_wintofront( n );
				switch [ tg_type n ] {
					case 2 {
						set [ tg_b n ] = 1;
						let tg_update = TRUE;
					}
					case 3 {
						let s = tg_slider_size( n, [ tg_h n ] );
						let o = tg_slider_offset( n, [ tg_h n ] );
						let e = -( -( [ tg_h n ] 4 ) s );
						let y = +( +( tg_gety( n ) o ) 2 );
						if <( tg_sely y ) {
							let t = -( [ tg_a n ] [ tg_b n ] );
							if <( t 0 ) {
								let t = 0;
							}
							set [ tg_a n ] = t;
							let selected = n;
							let tg_update = TRUE;
						}
						if >( tg_sely +( y s ) ) {
							let t = +( [ tg_a n ] [ tg_b n ] );
							if >( t -( [ tg_c n ] [ tg_b n ] ) ) {
								let t = -( [ tg_c n ] [ tg_b n ] );
							}
							set [ tg_a n ] = t;
							let selected = n;
							let tg_update = TRUE;
						}
					}
					case 4 {
						let t = [ tg_a n ];
						let l = /( -( [ tg_w n ] 16 ) 8 );
						if !( =( tg_focus n ) ) {
							if >( $len( t ) l ) {
								set [ tg_c n ] = -( $len( t ) l );
							} else {
								set [ tg_c n ] = 0;
							}
							let tg_focus = n;
						}
						let p = -( +( [ tg_c n ] /( -( tg_selx tg_getx( n ) ) 8 ) ) 1 );
						if <( p [ tg_c n ] ) {
							let p = [ tg_c n ];
						}
						if >( p $len( t ) ) {
							let p = $len( t );
						}
						set [ tg_b n ] = p;
						let tg_update = TRUE;
					}
					case 6 {
						let s = +( [ tg_b n ] /( -( tg_sely +( tg_gety( n ) 6 ) ) 16 ) );
						if &&( =( s [ tg_c n ] ) <( -( $millis tg_time ) 500 ) ){
							let selected = [ tg_action n ];
							let tg_time = 0;
						} else {
							if <( s $len( [ tg_a n ] ) ) {
								set [ tg_c n ] = s;
								let selected = n;
							}
							let tg_time = $millis;
						}
						let tg_update = TRUE;
					}
					case 7 {
						let s = tg_slider_size( n, [ tg_w n ] );
						let o = tg_slider_offset( n, [ tg_w n ] );
						let e = -( -( [ tg_w n ] 4 ) s );
						let x = +( +( tg_getx( n ) o ) 2 );
						if <( tg_selx x ) {
							let t = -( [ tg_a n ] [ tg_b n ] );
							if <( t 0 ) {
								let t = 0;
							}
							set [ tg_a n ] = t;
							let selected = n;
							let tg_update = TRUE;
						}
						if >( tg_selx +( x s ) ) {
							let t = +( [ tg_a n ] [ tg_b n ] );
							if >( t -( [ tg_c n ] [ tg_b n ] ) ) {
								let t = -( [ tg_c n ] [ tg_b n ] );
							}
							set [ tg_a n ] = t;
							let selected = n;
							let tg_update = TRUE;
						}
					}
				}
				if &&( selected !( =( selected n ) ) ) {
					let tg_selx = 0;
					let tg_sely = 0;
				}
			}
		}
		case MOUSE_RELEASED_EVENT {
			if ||( tg_selx tg_sely ) {
				let n = tg_find( tg_selx, tg_sely, 0 );
				switch [ tg_type n ] {
					case 2 {
						set [ tg_b n ] = 0;
						let tg_update = TRUE;
						if =( tg_find( mousex, mousey, 0 ) n ) {
							let selected = n;
						}
					}
				}
				let tg_selx = 0;
				let tg_sely = 0;
			}
		}
		case MOUSE_WHEEL_EVENT {
			let n = tg_find( mousex, mousey, 0 );
			if &&( =( [ tg_type n ] 6 ) >( [ tg_link n ] 0 ) ) {
				let w = tg_wintofront( n );
				set [ tg_a [ tg_link n ] ] = -( [ tg_a [ tg_link n ] ] $mousewheel );
				let tg_update = TRUE;
			}
		}
		case KEY_PRESSED_EVENT {
			let n = tg_focus;
			if =( [ tg_type n ] 4 ) {
				let t = [ tg_a n ];
				let p = [ tg_b n ];
				let l = /( -( [ tg_w n ] 16 ) 8 );
				let c = $keyboard;
				switch c {
					case KEY_BACKSPACE {
						if &( $keyshift 3 ) {
							set [ tg_a n ] = $sub( t p -( $len( t ) p ) );
							set [ tg_b n ] = 0;
							set [ tg_c n ] = 0;
						} else {
							if >( p 0 ) {
								set [ tg_a n ] = $str( $sub( t 0 -( p 1 ) ) $sub( t p -( $len( t ) p ) ) );
								let p = -( p 1 );
								set [ tg_b n ] = p;
								if <( p [ tg_c n ] ) {
									set [ tg_c n ] = p;
								}
							}
						}
					}
					case KEY_RETURN {
						let tg_focus = 0;
						let tg_update = TRUE;
						let n = [ tg_action n ];
					}
					case KEY_LEFT {
						if >( p 0 ) {
							let p = -( p 1 );
						}
						set [ tg_b n ] = p;
						if <( p [ tg_c n ] ) {
							set [ tg_c n ] = p;
						}
					}
					case KEY_RIGHT {
						if <( p $len( t ) ) {
							inc p;
						}
						set [ tg_b n ] = p;
						if >e( -( p [ tg_c n ] ) l ) {
							set [ tg_c n ] = +( -( p l ) 1 );
						}
					}
					case KEY_DELETE {
						if &( $keyshift 3 ) {
							set [ tg_a n ] = $sub( t 0 p );
						} else {
							if <( p $len( t ) ) {
								set [ tg_a n ] = $str( $sub( t 0 p ) $sub( t +( p 1 ) -( $len( t ) +( p 1 ) ) ) );
							}
						}
					}
					case KEY_HOME {
						set [ tg_b n ] = 0;
						set [ tg_c n ] = 0;
					}
					case KEY_END {
						let p = $len( t );
						set [ tg_b n ] = p;
						if >e( -( p [ tg_c n ] ) l ) {
							set [ tg_c n ] = +( -( p l ) 1 );
						}
					}
					default {
						if >( c 31 ) {
							if &( $keyshift 3 ) {
								if <( c 64 ) {
									let c = $chr( " !\"~$%&@()*+<_>?)!\"#$%^&*(::<+>?@", -( c 32 ) );
								} else {
									if <( c 96 ) {
										let c = +( c 32 );
									} else {
										let c = -( c 32 );
									}
								}
							}
							if <( c 127 ) {
								set [ tg_a n ] = $str( $sub( t 0 p ) $asc( c ) $sub( t p -( $len( t ) p ) ) );
								inc p;
								set [ tg_b n ] = p;
								if >( -( p [ tg_c n ] ) l ) {
									set [ tg_c n ] = -( p l );
								}
							}
						}
					}
				}
				let selected = n;
				let tg_update = TRUE;
			}
		}
	}
	return selected;
}

function read_dir( path ) {
	var head, elem, len, arr;
	let head = $dir( path );
	let elem = head;
	while elem {
		let elem = $next( elem );
		inc len;
	}
	let arr = $array( len );
	let len = 0;
	let elem = head;
	while elem {
		set [ arr len ] = $tup( $unquote( $child( elem ) ) $int( $next( $child( elem ) ) ) );
		let elem = $next( elem );
		inc len;
	}
	return arr;
}

function sort_dir( vals ) {
	var progress, idx, tmp, lhs, rhs;
	let progress = TRUE;
	while progress {
		let idx = 1;
		let progress = FALSE;
		while <( idx $len( vals ) ) {
			let tmp = [ vals -( idx 1 ) ];
			let lhs = tmp;
			if >e( $tup( 0 lhs ) 0 ) {
				let lhs = $tup( lhs, 0 );
			}
			let rhs = [ vals idx ];
			if >e( $tup( 0 rhs ) 0 ) {
				let rhs = $tup( [ vals idx ] 0 );
			}
			if >( $cmp( lhs rhs ) 0 ) {
				set [ vals -( idx 1 ) ] = [ vals idx ];
				set [ vals idx ] = tmp;
				let progress = TRUE;
			}
			inc idx;
		}
	}
}

function format_dir( vals ) {
	var idx, len;
	while <( idx $len( vals ) ) {
		let len = $tup( 0 [ vals idx ] );
		if <( len 0 ) {
			set [ vals idx ] = $tup( $str( "[Dir] " [ vals idx ] ) 1 ); 
		} else {
			if >( len 9999 ) {
				if >( len *( 1048576 2047 ) ) {
					let len = "(+2g)";
				} else {
					if >( len *( 1024 9999 ) ) {
						let len = $str( /( len 1048576 ) "m");
					} else {
						let len = $str( /( len 1024 ) "k");
					}
				}
			} else {
				let len = $str( len );
			}
			while <( $len( len ) 5 ) {
				let len = $str( " " len );
			}
			set [ vals idx ] = $tup( $str( len " " [ vals idx ] ) 0 ); 
		}
		inc idx;
	}
}

function tg_file_selector( title ) {
	var err;
	if <( tg_num_unused() 8 ) {
		throw "Not enough free gadgets.";
	}
	if fs_win {
		call tg_dispose( fs_win );
	}
	try {
		let fs_path = $path( fs_path );
	} catch err {
		let fs_path = $path( "." );
	}
	let fs_win = tg_unused();
	call tg_window( fs_win, 50, 50, 510, 270, title );
	set [ tg_mode fs_win ] = 2;
	set [ tg_min fs_win ] = 200;
	call tg_sizegad( tg_unused(), fs_win, 490, 250, 16, 16 );
	let fs_dir = tg_unused();
	call tg_textbox( fs_dir, fs_win, 10, 32, 380, 28, fs_path );
	call tg_anchors( fs_dir, 1, 1, 0, 1 );
	let fs_slider = tg_unused();
	call tg_vslider( fs_slider, fs_win, 396, 32, 20, 226, 10, 100 );
	call tg_anchors( fs_slider, 1, 0, 1, 1 );
	let fs_list = tg_unused();
	call tg_listbox( fs_list, fs_win, 10, 64, 380, 160, read_dir( fs_path ), fs_slider );
	set [ tg_c fs_list ] = -1;
	call tg_anchors( fs_list, 1, 1, 1, 1 );
	call sort_dir( [ tg_a fs_list ] );
	call format_dir( [ tg_a fs_list ] );
	let fs_file = tg_unused();
	call tg_textbox( fs_file, fs_win, 10, 230, 380, 28, "" );
	call tg_anchors( fs_file, 0, 1, 1, 1 );
	let fs_cancel = tg_unused();
	call tg_button( fs_cancel, fs_win, 422, 32, 80, 28, "Cancel" );
	call tg_anchors( fs_cancel, fs_win, 0, 0, 1 );
	let fs_okay = tg_unused();
	call tg_button( fs_okay, fs_win, 422, 64, 80, 28, "Okay" );
	call tg_anchors( fs_okay, 1, 0, 0, 1 );
	call tg_set_action( fs_dir, fs_okay );
	call tg_set_action( fs_list, fs_okay );
	call tg_set_action( fs_file, fs_okay );
	call tg_wintofront( fs_win );
	let tg_update = TRUE;
}

function fs_dispose() {
	call tg_dispose( fs_win );
	let fs_win = 0;
	let fs_dir = 0;
	let fs_slider = 0;
	let fs_list = 0;
	let fs_file = 0;
	let fs_cancel = 0;
	let fs_okay = 0;
	let tg_update = TRUE;
}

function fs_file_selected() {
	if >e( [ tg_c fs_list ] 0 ) {
		set [ tg_c fs_list ] = -1;
		let tg_update = TRUE;
	}
}

function fs_dir_selected() {
	call fs_file_selected();
	if $len( [ tg_a fs_file ] ) {
		set [ tg_a fs_file ] = "";
		let tg_update = TRUE;
	}
}

function fs_list_selected() {
	var file;
	let file = [ [ tg_a fs_list ] [ tg_c fs_list ] ];
	if $tup( 0 file ) {
		set [ tg_a fs_file ] = "";
	} else {
		set [ tg_a fs_file ] = $sub( file, 6, -( $len( file ) 6 ) );
	}
	let tg_update = TRUE;
}

function fs_okay_selected() {
	var sep, path, err, idx;
	let sep = $sub( fs_path, $endidx( fs_path, "/:\\" ), 1 );
	if =( $len( [ tg_a fs_file ] ) 0 ) {
		try {
			if <( [ tg_c fs_list ] 0 ) {
				let path = $path( $str( [ tg_a fs_dir ] sep [ tg_a fs_file ] ) );
			} else {
				let path = [ [ tg_a fs_list ] [ tg_c fs_list ] ];
				let path = $sub( path, 6, -( $len( path ) 6 ) );
				let path = $path( $str( [ tg_a fs_dir ] sep path ) );
			}
			set [ tg_a fs_list ] = read_dir( path );
			call sort_dir( [ tg_a fs_list ] );
			call format_dir( [ tg_a fs_list ] );
			set [ tg_b fs_list ] = 0;
			set [ tg_c fs_list ] = -1;
			set [ tg_a fs_slider ] = 0;
			set [ tg_a fs_dir ] = path;
			let fs_path = path;
		} catch err {
			let err = $str( err );
			let idx = $endidx( err "(" );
			if >e( idx 0 ) {
				let err = $sub( err, 0, idx );
			}
			set [ tg_a fs_file ] = err;
			set[ tg_a fs_dir ] = fs_path;
		}
		let tg_update = TRUE;
	} else {
		let path = $str( [ tg_a fs_dir ] sep [ tg_a fs_file ] );
		call fs_dispose();
		return path;
	}
}

function tg_request( title, message, left_button, right_button ) {
	var len, msg, num, width, height, x, y, str;
	let num = 3;
	let height = 72;
	let len = $len( $str( title ) );
	let msg = message;
	while msg {
		let x = $len( $unquote( msg ) );
		if >( x len ) {
			let len = x;
		}
		inc num;
		let height = +( height 24 );
		let msg = $next( msg );
	}
	if left_button {
		let x = +( $len( $str( left_button ) ) 2 );
	}
	if right_button { 
		let x = +( x +( $len( $str( right_button ) ) 3 ) );
	}
	if >( x len ) {
		let len = x;
	}
	let width = +( *( len 8 ) 32 );
	let x = /( -( [ tg_w 0 ] width ) 2 );
	let y = /( -( [ tg_h 0 ] height ) 2 );
	if <( tg_num_unused() num ) {
		throw "Not enough free gadgets.";
	}
	if req_win {
		call tg_dispose( req_win );
	}
	let req_win = tg_unused();
	call tg_window( req_win, x, y, width, height, title );
	set [ tg_mode req_win ] = 2;
	let msg = message;
	let y = 32;
	while msg {
		let str = $unquote( msg );
		let len = *( $len( str ) 8 );
		call tg_label( tg_unused(), req_win, /( -( width len ) 2 ), y, len, 1, str );
		let y = +( y 24 );
		let msg = $next( msg );
	}
	if left_button {
		let req_but1 = tg_unused();
		let len = *( +( $len( $str( left_button ) ) 2 ) 8 );
		call tg_button( req_but1, req_win, 16, -( height 40 ), len, 26, left_button );
	} else {
		let req_but1 = 0;
	}
	if right_button {
		let req_but2 = tg_unused();
		let len = *( +( $len( $str( right_button ) ) 2 ) 8 );
		call tg_button( req_but2, req_win, -( -( width len ) 16 ), -( height 40 ), len, 26, right_button );
	} else {
		let req_but2 = 0;
	}
	call tg_wintofront( req_win );
	let tg_update = TRUE;
}

function req_dispose() {
	call tg_dispose( req_win );
	let req_win = 0;
	let req_but1 = 0;
	let req_but2 = 0;
	let tg_update = TRUE;
}

program tgads {
	var path = $src( @tgads );
	var event, selected, file;
	let palette = $array( ${ 0x000000, 0xFFFFFF, 0xA0A0A0, 0x6080B0 } );
	
	display 640, 480, "tgads";
	
	call tg_charset( $load( $str( $sub( path 0 +( $endidx( path, "/:\\" ) 1 ) ) "topaz8.txt" ) ) );
	call tg_init( 16, 640, 480 );
	
	call tg_window( 1, 16, 16, 320, 160, "Gadget Test" );
	call tg_sizegad( 2, 1, 300, 140, 16, 16 );
	call tg_minsize( 1, 160 );
	
	call tg_button( 3, 1, 8, 32, 120, 26, "Select File" );
	call tg_button( 4, 1, 8, 64, 120, 26, "Quit" );
	
	call tg_textbox( 5, 1, 8, 96, 288, 26, "" );
	call tg_anchors( 5, 0, 1, 0, 1 );
	
	call tg_draw( 0 );

	while TRUE {
		# Show might block until the next frame.
		show;
		# Wait before handling events to reduce latency (at 60hz).
		sleep 16;
		# Wait for at least one event.
		let event = $waitevent;
		while event {
			# Handle all events in queue.
			switch tg_scan( event ) {
				case 0 {
				}
				case 3 {
					call tg_file_selector( "Select File" );
				}
				case 4 {
					call tg_request( "Quit?", ${ "" "Really quit this incredible program?!" "" }, "Yes, please!", "Only kidding!" );
				}
				case fs_file {
					call fs_file_selected();
				}
				case fs_dir {
					call fs_dir_selected();
				}
				case fs_list {
					call fs_list_selected();
				}
				case fs_cancel {
					call fs_dispose();
				}
				case fs_okay {
					let file = fs_okay_selected();
					if file {
						set[ tg_a 5 ] = file;
					}
				}
				case req_but1 {
					exit 0;
				}
				case req_but2 {
					call req_dispose();
				}
			}
			let event = $pollevent;
		}
		call tg_redraw();
	}
}
