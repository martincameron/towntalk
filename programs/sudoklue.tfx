
rem {
	Sudoku tool.
	Use cursors and number keys to populate board.
	Permitted values are displayed in white.
	Incorrect values are displayed in black.
	Possible values for unpopulated cells are displayed in blue.
	Press F1 to attempt to solve by brute-force.
}

const TOPAZ_8 = ${
	0x0000 0x0000 0x0000 0x0000
	0x1818 0x1818 0x1800 0x1800
	0x6C6C 0x0000 0x0000 0x0000
	0x6C6C 0xFE6C 0xFE6C 0x6C00
	0x183E 0x603C 0x067C 0x1800
	0x0066 0xACD8 0x366A 0xCC00
	0x386C 0x6876 0xDCCE 0x7B00
	0x1818 0x3000 0x0000 0x0000
	0x0C18 0x3030 0x3018 0x0C00
	0x3018 0x0C0C 0x0C18 0x3000
	0x0066 0x3CFF 0x3C66 0x0000
	0x0018 0x187E 0x1818 0x0000
	0x0000 0x0000 0x0018 0x1830
	0x0000 0x007E 0x0000 0x0000
	0x0000 0x0000 0x0018 0x1800
	0x0306 0x0C18 0x3060 0xC000
	0x3C66 0x6E7E 0x7666 0x3C00
	0x1838 0x7818 0x1818 0x1800
	0x3C66 0x060C 0x1830 0x7E00
	0x3C66 0x061C 0x0666 0x3C00
	0x1C3C 0x6CCC 0xFE0C 0x0C00
	0x7E60 0x7C06 0x0666 0x3C00
	0x1C30 0x607C 0x6666 0x3C00
	0x7E06 0x060C 0x1818 0x1800
	0x3C66 0x663C 0x6666 0x3C00
	0x3C66 0x663E 0x060C 0x3800
	0x0018 0x1800 0x0018 0x1800
	0x0018 0x1800 0x0018 0x1830
	0x0006 0x1860 0x1806 0x0000
	0x0000 0x7E00 0x7E00 0x0000
	0x0060 0x1806 0x1860 0x0000
	0x3C66 0x060C 0x1800 0x1800
	0x7CC6 0xDED6 0xDEC0 0x7800
	0x3C66 0x667E 0x6666 0x6600
	0x7C66 0x667C 0x6666 0x7C00
	0x1E30 0x6060 0x6030 0x1E00
	0x786C 0x6666 0x666C 0x7800
	0x7E60 0x6078 0x6060 0x7E00
	0x7E60 0x6078 0x6060 0x6000
	0x3C66 0x606E 0x6666 0x3E00
	0x6666 0x667E 0x6666 0x6600
	0x3C18 0x1818 0x1818 0x3C00
	0x0606 0x0606 0x0666 0x3C00
	0xC6CC 0xD8F0 0xD8CC 0xC600
	0x6060 0x6060 0x6060 0x7E00
	0xC6EE 0xFED6 0xC6C6 0xC600
	0xC6E6 0xF6DE 0xCEC6 0xC600
	0x3C66 0x6666 0x6666 0x3C00
	0x7C66 0x667C 0x6060 0x6000
	0x78CC 0xCCCC 0xCCDC 0x7E00
	0x7C66 0x667C 0x6C66 0x6600
	0x3C66 0x703C 0x0E66 0x3C00
	0x7E18 0x1818 0x1818 0x1800
	0x6666 0x6666 0x6666 0x3C00
	0x6666 0x6666 0x3C3C 0x1800
	0xC6C6 0xC6D6 0xFEEE 0xC600
	0xC366 0x3C18 0x3C66 0xC300
	0xC366 0x3C18 0x1818 0x1800
	0xFE0C 0x1830 0x60C0 0xFE00
	0x3C30 0x3030 0x3030 0x3C00
	0xC060 0x3018 0x0C06 0x0300
	0x3C0C 0x0C0C 0x0C0C 0x3C00
	0x1038 0x6CC6 0x0000 0x0000
	0x0000 0x0000 0x0000 0x00FE
	0x1818 0x0C00 0x0000 0x0000
	0x0000 0x3C06 0x3E66 0x3E00
	0x6060 0x7C66 0x6666 0x7C00
	0x0000 0x3C60 0x6060 0x3C00
	0x0606 0x3E66 0x6666 0x3E00
	0x0000 0x3C66 0x7E60 0x3C00
	0x1C30 0x7C30 0x3030 0x3000
	0x0000 0x3E66 0x663E 0x063C
	0x6060 0x7C66 0x6666 0x6600
	0x1800 0x1818 0x1818 0x0C00
	0x0C00 0x0C0C 0x0C0C 0x0C78
	0x6060 0x666C 0x786C 0x6600
	0x1818 0x1818 0x1818 0x0C00
	0x0000 0xECFE 0xD6C6 0xC600
	0x0000 0x7C66 0x6666 0x6600
	0x0000 0x3C66 0x6666 0x3C00
	0x0000 0x7C66 0x667C 0x6060
	0x0000 0x3E66 0x663E 0x0606
	0x0000 0x7C66 0x6060 0x6000
	0x0000 0x3C60 0x3C06 0x7C00
	0x3030 0x7C30 0x3030 0x1C00
	0x0000 0x6666 0x6666 0x3E00
	0x0000 0x6666 0x663C 0x1800
	0x0000 0xC6C6 0xD6FE 0x6C00
	0x0000 0xC66C 0x386C 0xC600
	0x0000 0x6666 0x663C 0x1830
	0x0000 0x7E0C 0x1830 0x7E00
	0x0E18 0x1870 0x1818 0x0E00
	0x1818 0x1818 0x1818 0x1800
	0x7018 0x180E 0x1818 0x7000
	0x729C 0x0000 0x0000 0x0000
};

const PALETTE = ${ 0x000000, 0xFFFFFF, 0xA0A0A0, 0x6080B0 };

function init_charset( charset, palette ) {
	var w, h, image, clr, chr, y, x;
	var bits, chroff;
	let w = *( 8 96 );
	let h = *( 8 $len( palette ) );
	let image = $array( *( w h ) );
	let clr = 0;
	while <( clr $len( palette ) ) {
		let chr = 0;
		while <( chr 95 ) {
			let chroff = +( *( clr *( w 8 ) ) *( chr 8 ) );
			let y = 0;
			while <( y 8 ) {
				let bits = [ charset +( *( chr 4 ) >>( y 1 ) ) ];
				let x = 0;
				while <( x 8 ) {
					if &( >>( bits -( 15 +( *( &( y 1 ) 8 ) x ) ) ) 1 ) {
						set [ image +( chroff x ) ] = +( *( [ palette clr ] 256 ) 255 );
					}
					inc x;
				}
				let chroff = +( chroff w );
				inc y;
			}
			inc chr;
		}
		inc clr;
	}
	fxsurface 0, w, h, image;
}

function draw_text( text, x, y, clr ) {
	var idx, len;
	let len = $len( text );
	while <( idx len ) {
		fxblit 0, *( -( $chr( text idx ) 32 ) 8 ), *( clr 8 ), 8, 8, +( x *( idx 8 ) ), y;
		inc idx;
	}
}

function draw_box( x, y, w, h, c1, c2 ) {
	fxrect x, y, 2, h, c2;
	fxrect +( x -( w 2 ) ), y, 2, h, c1;
	fxrect x, y, -( w 1 ), 2, c2;
	fxrect +( x 1 ), +( y -( h 2 ) ), -( w 1 ), 2, c1;
}

function check( board, idx ) {
	var row, col, c, seg_row, seg_col, r, i;
	let row = /( idx 9 );
	let col = %( idx 9 );
	let c = 0;
	while <( c 9 ) {
		if &&( =( [ board +( *( row 9 ) c ) ] [ board idx ] ) !( =( col c ) ) ) {
			return FALSE;
		}
		inc c;
	}
	let r = 0;
	while <( r 9 ) {
		if &&( =( [ board +( *( r 9 ) col ) ] [ board idx ] ) !( =( row r ) ) ) {
			return FALSE;
		}
		inc r;
	}
	let seg_row = -( row %( row 3 ) );
	let seg_col = -( col %( col 3 ) );
	let r = 0;
	while <( r 3 ) {
		let c = 0;
		while <( c 3 ) {
			let i = +( +( *( +( seg_row r ) 9 ) seg_col ) c );
			if &&( !( =( i idx ) ) =( [ board i ] [ board idx ] ) )
			{
				return FALSE;
			}
			inc c;
		}
		inc r;
	}
	return TRUE;
}

function solve( board, iterations ) {
	var temp, idx, itr;
	let temp = $array( 81 );
	let idx = 0;
	while <( idx 81 ) {
		if &&( [ board idx ] !( check( board idx ) ) ) {
			return FALSE;
		} else {
			set [ temp idx ] = [ board idx ];
		}
		inc idx;
	}
	let itr = 0;
	let idx = 0;
	while <( idx 81 ) {
		if &&( [ temp idx ] check( temp, idx ) ) {
			inc idx;
		} else {
			while ||( >e( [ temp idx ] 9 ) [ board idx ] ) {
				set [ temp idx ] = [ board idx ];
				dec idx;
				if <( idx 0 ) {
					return 0;
				}
			}
			set [ temp idx ] = +( [ temp idx ] 1 );
		}
		inc itr;
		if >e( itr iterations ) {
			return 0;
		}
	}
	let idx = 0;
	while <( idx 81 ) {
		set [ board idx ] = [ temp idx ];
		inc idx;
	}
	return itr;
}

function draw_board( board, selected, palette ) {
	var y, x, c, i, n, p;
	fxrect 0, 0, 456, 456, [ palette 2 ];
	call draw_box( 8, 8, 440, 440, [ palette 1 ], [ palette 0 ] );
	let y = 0;
	while <( y 9 ) {
		let x = 0;
		while <( x 9 ) {
			let i = +( *( y 9 ) x );
			if =( selected i ) {
				fxrect +( 16 *( x 48 ) ), +( 16 *( y 48 ) ), 40, 40, [ palette 3 ];
				let c = 0;
			} else {
				let c = 3;
			}
			#call draw_box( +( 16 *( x 48 ) ), +( 16 *( y 48 ) ), 40, 40, [ palette 1 ], [ palette 0 ] );
			let n = [ board i ];
			if >( n 0 ) {
				if check( board i ) {
					let c = 1;
				} else {
					let c = 0;
				}
				call draw_text( $str( n ), +( 32 *( x 48 ) ), +( 32 *( y 48 ) ), c );
			} else {
				let p = 0;
				while <( p 9 ) {
					set [ board i ] = +( p 1 );
					if check( board i ) {
						call draw_text( $str( +( p 1 ) ),
							+( +( 24 *( x 48 ) ) *( %( p 3 ) 8 ) ),
							+( +( 24 *( y 48 ) ) *( /( p 3 ) 8 ) ), c );
					}
					inc p;
				}
				set [ board i ] = 0;
			}
			inc x;
		}
		inc y;
	}
}

program sudoklue {
	var event, palette, board, selected;
	fxopen 456, 456, "Sudoklue";
	let palette = $array( PALETTE );
	call init_charset( $array( TOPAZ_8 ), palette );
	let board = $array( 81 );
	call draw_board( board, selected, palette );
	while TRUE {
		# Show might block until the next frame.
		fxshow;
		# Wait before handling events to reduce latency (at 60hz).
		fxsleep 16;
		# Wait for at least one event.
		let event = $fxwait;
		while event {
			# Handle all events in queue.
			switch event {
				case FX_KEYDOWN {
					switch $keyboard {
						case FX_KEY_UP {
							let selected = %( +( selected 72 ) 81 );
						}
						case FX_KEY_DOWN {
							let selected = %( +( selected 9 ) 81 );
						}
						case FX_KEY_LEFT {
							let selected = %( +( selected 80 ) 81 );
						}
						case FX_KEY_RIGHT {
							let selected = %( +( selected 1 ) 81 );
						}
						case FX_KEY_BACKSPACE, FX_KEY_DELETE, FX_KEY_PAD_0 {
							set [ board selected ] = 0;
						}
						case FX_KEY_F1 {
							print solve( board, 1000000 );
						}
						default {
							if &&( >e( $keyboard FX_KEY_PAD_1 ) <( $keyboard FX_KEY_PAD_0 ) ) {
								set [ board selected ] = +( -( $keyboard FX_KEY_PAD_1 ) 1 );
							} else {
								if &&( >e( $keyboard FX_KEY_0 ) <( $keyboard +( FX_KEY_0 10 ) ) ) {
									set [ board selected ] = -( $keyboard FX_KEY_0 );
								}
							}
						}
					}
					call draw_board( board, selected, palette );
				}
				case FX_MOUSEKEYDOWN {
					let selected = %( +( *( /( -( $ymouse 16 ) 48 ) 9 ) /( -( $xmouse 16 ) 48 ) ) 81 );
					call draw_board( board, selected, palette );
				}
			}
			let event = $fxpoll;
		}
	}
}
