
const BASE64_ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

function base64_encode( input ) {
	var in_idx, out_idx, bits, buf;
	var output = $array( *( +( /( $len( input ) 3 ) ?( %( $len( input ) 3 ) 1 0 ) ) 4 ) );
	while <( in_idx $len( input ) ) {
		if <( bits 6 ) {
			let buf = |( <<( buf 8 ) &( $chr( input in_idx ) 0xFF ) );
			let bits = +( bits 8 );
			inc in_idx;
		}
		let bits = -( bits 6 );
		let [ output out_idx ] = $chr( BASE64_ALPHABET &( >>( buf bits ) 0x3F ) );
		inc out_idx;
	}
	while %( bits 6 ) {
		let buf = <<( buf 1 );
		inc bits;
	}
	while bits {
		let bits = -( bits 6 );
		let [ output out_idx ] = $chr( BASE64_ALPHABET &( >>( buf bits ) 0x3F ) );
		inc out_idx;
	}
	while <( out_idx $len( output ) ) {
		let [ output out_idx ] = 0x3D;
		inc out_idx;
	}
	return $sub( output 0 $len( output ) );
}

rem { Decode to output array if not null and return output length. }
function base64_decode( input, output ) {
	var buf, bits, in_idx, out_idx, lookup = $array( 128 );
	while <( in_idx $len( BASE64_ALPHABET ) ) {
		set [ lookup $chr( BASE64_ALPHABET in_idx ) ] = +( in_idx 1 );
		inc in_idx;
	}
	let in_idx = 0;
	while <( in_idx $len( input ) ) {
		var char = [ lookup $chr( input in_idx ) ];
		if char {
			let buf = |( <<( buf 6 ) -( char 1 ) );
			let bits = +( bits 6 );
			if >( bits 7 ) {
				let bits = -( bits 8 );
				if output {
					set [ output out_idx ] = >>( buf bits );
				}
				inc out_idx;
			}
		}
		inc in_idx;
	}
	return out_idx;
}

program base64 {
	print base64_encode( $load( $argv( 1 ) ) );
}
