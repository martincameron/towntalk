
rem {
	The Para-Dragster. See "Total Triple Trouble" by Droopy&Static/Rebels.
}

const WIDTH = 640, HEIGHT = 480;

const FP_SHIFT = 15, FP_ONE = <<( 1 FP_SHIFT ), FP_MASK = -( FP_ONE 1 );

const TABLE_ACCURACY = 4;
const SINE_TABLE = $pack( $array( ${ 
	    0,  6393, 12540, 18205, 23170, 27246, 30274, 32138, 32768,
	32138, 30274, 27246, 23170, 18205, 12540,  6393,     0,     0
} ) );

# Return sine of PI*x in fixed-point.
function sine( x ) {
	var tab_idx = >>( &( x FP_MASK ) -( FP_SHIFT TABLE_ACCURACY ) );
	var c = $unpack( SINE_TABLE tab_idx );
	var m = -( $unpack( SINE_TABLE +( tab_idx 1 ) ) c );
	let m = *( m &( x >>( FP_MASK TABLE_ACCURACY ) ) );
	var y = +( c >>( m -( FP_SHIFT TABLE_ACCURACY ) ) );
	if &( x FP_ONE ) {
		let y = -( 0 y );
	}
	return y;
}

# Linear-interpolate the specified array with wrap-around.
function interpolate( input, index ) {
	var idx = >>( index FP_SHIFT );
	var c = [ input %( idx $len( input ) ) ];
	var m = -( [ input %( +( idx 1 ) $len( input ) ) ] c );
	return +( >>( *( m &( index FP_MASK ) ) FP_SHIFT ) c );
}

# Mix the specified colours (amount from 0 to 256).
function mix( colour1, colour2, amount ) {
	var r1 = &( >>( colour1 16 ) 0xFF );
	var r2 = &( >>( colour2 16 ) 0xFF );
	var g1 = &( >>( colour1 8 ) 0xFF );
	var g2 = &( >>( colour2 8 ) 0xFF );
	var b1 = &( colour1 0xFF );
	var b2 = &( colour2 0xFF );
	var r = +( >>( *( -( r2 r1 ) amount ) 8 ) r1 );
	var g = +( >>( *( -( g2 g1 ) amount ) 8 ) g1 );
	var b = +( >>( *( -( b2 b1 ) amount ) 8 ) b1 );
	return |( |( <<( r 16 ) <<( g 8 ) ) b );
}

function para_dragster_pixels( bar, width, offset, bg_colour, fg_colour ) {
	var z, c, o, f, s, x, v, p, y, image = $array( *( width 512 ) );
	let z = 1;
	while <( z 16 ) {
		let c = mix( bg_colour, fg_colour, /( *( 256 z ) 15 ) );
		let o = -( <<( $len( bar ) FP_SHIFT ) %( /( <<( offset -( FP_SHIFT 1 ) ) z ) <<( $len( bar ) FP_SHIFT ) ) );
		let f = 0;
		while <( f 32 ) {
			let s = +( <<( *( $len( bar ) f ) -( FP_SHIFT 5 ) ) o );
			let x = 0;
			while <( x width ) {
				let v = interpolate( bar, +( /( <<( x -( FP_SHIFT 1 ) ) z ) s ) );
				if v {
					let p = |( <<( mix( 0, c, v ) 8 ) 0xFF );
					let y = +( *( z 32 ) f );
					while <( y 512 ) {
						set [ image +( *( y width ) x ) ] = p;
						let y = +( y 32 );
					}
				}
				inc x;
			}
			inc f;
		}
		inc z;
	}
	return image;
}

function redraw( frame ) {
	var y = 0, z = 0;
	#fxblit 0, 0, 0, WIDTH, 512, 0, 0;
	while <( y 256 ) {
		fxblit 0, 0, +( <<( &( y 0xF0 ) 1 ) &( frame 0x1F ) ), WIDTH, 1, 0, +( y 224 );
		fxblit 0, 0, +( <<( &( y 0xF0 ) 1 ) &( frame 0x1F ) ), WIDTH, 1, 0, -( 256 y );
		inc y;
	}
}

program bars {
	var event, frame;
	fxopen WIDTH, HEIGHT, "Para Dragster";
	fxsurface 0, WIDTH, 512, para_dragster_pixels( $array( ${ 0, 256, 0 } ), WIDTH, /( WIDTH 2 ), 0x000080, 0xFF0080 );
	while TRUE {
		inc frame;
		call redraw( frame );
		# Show might block until the next frame.
		fxshow;
		# Wait to limit frame rate.
		fxsleep 10;
		# Handle all events.
		let event = $fxpoll;
		while event {
			if =( event FX_KEYDOWN ) {
				print $keyboard;
			}
			let event = $fxpoll;
		}
	}
}
