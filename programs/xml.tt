
rem {
	Simple XML parser and object-model.
}

library xml {
	struct ascii {
		# Enumerated ASCII character codes.
		nul soh stx etx eot enq ack bel bs  tab lf  vt  ff cr so si
		dle dc1 dc2 dc3 dc4 nak syn etb can em  sub esc fs gs rs us
		space exclam quote hash dollar percent amp squote
		lparen rparen star plus comma minus dot slash
		d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 colon semicolon lt equals gt question at
		A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
		lbracket backslash rbracket caret underscore backquote
		a b c d e f g h i j k l m n o p q r s t u v w x y z
		lbrace pipe rbrace tilde del
	}

	struct tuple {
		# Value with associated key, such as a named attribute.
		key, value
	}

	struct list {
		# Array-backed list.
		array, len
	}

	struct parser {
		# Supplies characters from a string and tracks line numbers.
		source, idx, current, line
	}

	struct writer {
		# Provides function to write output.
		write
	}

	struct node {
		# Common node properties and functions.
		write
	}

	struct pi( node ) {
		# Processing-instruction node.
		target, value
	}

	struct text( node ) {
		# Text node.
		text
	}

	struct entity( node ) {
		# Entity-reference node.
		name
	}

	struct comment( node ) {
		# Comment node.
		comment
	}

	struct element( node ) {
		# Element node, short-tags are enabled for output if template has no children.
		name, attributes, children, template, create_element
	}

	# Return a new tuple, initialized with the specified values.
	function new_tuple( key value ) { 
		var ( tuple ) tup = $new( tuple );
		let tup.key = key;
		let tup.value = value;
		return tup;
	}

	# Return a new empty list with the specified initial capacity.
	function new_list( capacity ) {
		var ( list ) this = $new( list );
		let this.array = $array( capacity );
		return this;
	}

	# Add the specified value to the specified list, increasing the capacity if necessary.
	function list_add( ( list ) this, value ) {
		if >e( this.len $len( this.array ) ) {
			var arr = $array( *( this.len 2 ) );
			var idx;
			while <( idx this.len ) {
				let [ arr idx ] = [ this.array idx ];
				inc idx;
			}
			let this.array = arr;
		}
		let [ this.array this.len ] = value;
		let this.len = +( this.len 1 );
	}

	# Insert the specified value into the specified list at the specified index.
	function list_insert( ( list ) this, value, idx ) {
		call list_add( this, 0 );
		while <( idx this.len ) {
			var tmp = [ this.array idx ];
			let [ this.array idx++ ] = value;
			let value = tmp;
		}
	}

	# Return a new parser for the specified source string.
	function new_parser( source ) {
		var ( parser ) this = $new( parser );
		let this.source = source;
		let this.idx = -1;
		let this.line = 1;
		call this:next_char();
		return this;
	}

	# Return the next character from the specified parser, or -1 if no more are available.
	function parser_next_char( ( parser ) this ) {
		let this.idx = +( this.idx 1 );
		if <( this.idx $len( this.source ) ) {
			let this.current = &( $chr( this.source this.idx ) 0xFF );
			if =( this.current ascii.lf ) {
				let this.line = +( this.line 1 );
			}
		} else {
			let this.current = -1;
		}
		return this.current;
	}

	# Return a string from the specified parser, up to the end or one of the characters in the specified string.
	function parser_parse_string( ( parser ) this, terminators ) {
		if <( this.current 0 ) {
			return "";
		}
		var end = $stridx( this.source, terminators, this.idx );
		if <( end 0 ) {
			let end = $len( this.source );
			let this.current = -1;
		} else {
			let this.current = &( $chr( this.source end ) 0xFF );
			if =( this.current ascii.lf ) {
				let this.line = +( this.line 1 );
			}
		}
		var str = $sub( this.source, this.idx, -( end this.idx ) );
		let this.idx = end;
		var idx = ?( $len( str ) $stridx( str, "\12", 0 ) -1 );
		while >e( idx 0 ) {
			let this.line = +( this.line 1 );
			inc idx;
			let idx = ?( <( idx $len( str ) ) $stridx( str, "\12", idx ) -1 );
		}
		return str;
	}

	# Return the content of a quoted string from the specified parser.
	function parse_qname( ( parser ) p ) {
		var quote = p.current;
		if &&( <>( quote ascii.quote ) <>( quote ascii.squote ) ) {
			throw $cat( "Expected quote character on line " p.line "."  );
		}
		call p:next_char();
		var str = p:parse_string( $asc( quote ) );
		call p:expect( quote );
		call p:next_char();
		return str;
	}

	# Skip over space and control-characters from the specified parser.
	function parser_skip_space( ( parser ) this ) {
		while &&( >e( this.current 0 ) <e( this.current 32 ) ) {
			call this:next_char();
		}
		return this.current;
	}

	# Throw an exception if the current character of the specified parser is not the specified code-point.
	function parser_expect( ( parser ) this, chr ) {
		if <>( this.current chr ) {
			throw $cat( "Expected '" $asc( chr ) "' on line " this.line "."  );
		}
	}

	# Return a new processing-instruction node.
	function new_pi( target, value ) {
		var ( pi ) p = $new( pi );
		let p.target = target;
		let p.value = value;
		let p.write = @write_pi;
		return p;
	}

	# Member function for writing processing-instruction nodes.
	function write_pi( ( pi ) this, ( writer ) output ) {
		call :output.write( "<?" );
		call :output.write( this.target );
		call :output.write( " " );
		call :output.write( this.value );
		call :output.write( "?>" );
	}

	# Parse a processing-instruction node from the specified parser positioned at the first question-mark.
	function parse_pi( ( parser ) p ) {
		call p:expect( ascii.question );
		call p:next_char();
		var target = p:parse_string( "\11\12\15 " );
		call p:skip_space();
		var value = p:parse_string( "?" );
		call p:expect( ascii.question );
		call p:next_char();
		while <>( p.current ascii.gt ) {
			let value = $cat( value "?" p:parse_string( "?" ) );
			call p:expect( ascii.question );
			call p:next_char();
		}
		call p:next_char();
		return new_pi( target value );
	}

	# Return a new element with the specified name.
	function new_element( name ) {
		var ( element ) elem = $new( element );
		let elem.name = name;
		let elem.write = @write_element;
		let elem.attributes = new_list( 1 );
		let elem.children = new_list( 1 );
		let elem.create_element = @create_element;
		return elem;
	}

	# Member function for writing element nodes and their children.
	function write_element( ( element ) this, ( writer ) output ) {
		call :output.write( "<" );
		call :output.write( this.name );
		var idx;
		var ( list ) atts = this.attributes;
		while <( idx atts.len ) {
			var ( tuple ) att = [ atts.array idx++ ];
			call :output.write( " " );
			call :output.write( att.key );
			call :output.write( "=\"" );
			call :output.write( att.value );
			call :output.write( "\"" );
		}
		var ( list ) children = this.children;
		if &&( this.template <e( list.len( element.children( this.template ) ) 0 ) <e( children.len 0 ) ) {
			call :output.write( "/>" );
		} else {
			call :output.write( ">" );
			let idx = 0;
			while <( idx children.len ) {
				call :node.write( [ children.array idx++ ], output );
			}
			call :output.write( "</" );
			call :output.write( this.name );
			call :output.write( ">" );
		}
	}

	# Member function to create a new element, this may be replaced to create custom elements.
	function create_element( ( element ) this, name ) {
		if this.template {
			var ( list ) children = element.children( this.template );
			var idx;
			while <( idx children.len ) {
				var child = [ children.array idx++ ];
				if $instanceof( child element ) {
					if $eq( element.name( child ) name ) {
						var ( element ) elem = new_element( name );
						let elem.template = child;
						return elem;
					}
				}
			}
			throw $cat( "Element '" name "' not permitted as child of '" this.name "'." );
		}
		return new_element( name );
	}

	# Parse an appropriately-typed node using the specified parser and parent element.
	function parse_node( ( parser ) p, ( element ) parent ) {
		switch p.current {
			case ascii.lt {
				switch p:next_char() {
					case ascii.exclam {
						return parse_decl( p );
					}
					case ascii.question {
						return parse_pi( p );
					}
					case ascii.slash {
						return 0;
					}
				}
			}
			case ascii.amp {
				return parse_entity( p );
			}
			default {
				return new_text( p:parse_string( "&<" ) );
			}
		}
		var ( element ) elem = :parent.create_element( p:parse_string( "\11\12\15 />" ) );
		call p:skip_space();
		while &&( <>( p.current ascii.slash ) <>( p.current ascii.gt ) ) {
			var name = p:parse_string( "\11\12\15 =" );
			call p:skip_space();
			call p:expect( ascii.equals );
			call p:next_char();
			call p:skip_space();
			call list_add( elem.attributes new_tuple( name parse_qname( p ) ) );
			call p:skip_space();
		}
		switch p.current {
			case ascii.slash {
				call p:next_char();
			}
			case ascii.gt {
				call p:next_char();
				var child = parse_node( p, elem );
				while child {
					call list_add( elem.children child );
					let child = parse_node( p, elem );
				}
				call p:expect( ascii.slash );
				call p:next_char();
				let name = p:parse_string( "\11\12\15 >" );
				if $cmp( elem.name name ) {
					throw $cat( "Unexpected close tag '</" name ">' on line " p.line "." );
				}
			}
		}
		call p:skip_space();
		call p:expect( ascii.gt );
		call p:next_char();
		return elem;
	}

	# Return a new text-node with the specified value.
	function new_text( value ) {
		var ( text ) this = $new( text );
		let this.text = value;
		let this.write = @write_text;
		return this;
	}

	# Member function for writing text-nodes.
	function write_text( ( text ) this, ( writer ) output ) {
		call :output.write( this.text );
	}

	# Return a new text-node which writes content in a cdata section.
	function new_cdata( value ) {
		var ( text ) this = $new( text );
		let this.text = value;
		let this.write = @write_cdata;
		return this;
	}

	# Member function for writing text-nodes within cdata sections.
	function write_cdata( ( text ) this, ( writer ) output ) {
		call :output.write( "<![CDATA[" );
		call :output.write( this.text );
		call :output.write( "]]>" );
	}

	# Parse a cdata node from the specified parser positioned at "CDATA[".
	function parse_cdata( ( parser ) p ) {
		call p:expect( ascii.lbracket );
		call p:next_char();
		if $cmp( "CDATA" p:parse_string( "[" ) ) {
			throw $cat( "Expected 'CDATA' on line " p.line "." );
		}
		call p:next_char();
		var str = p:parse_string( "]" );
		while TRUE {
			call p:expect( ascii.rbracket );
			if =( p:next_char() ascii.rbracket ) {
				call p:next_char();
				call p:expect( ascii.gt );
				call p:next_char();
				return new_cdata( str );
			} else {
				let str = $cat( str "]" p:parse_string( "]" ) );
			}
		}
	}

	# Return a new entity-reference node with the specified value.
	function new_entity( name ) {
		var ( entity ) this = $new( entity );
		let this.name = name;
		let this.write = @write_entity;
		return this;
	}

	# Member function for writing entity-references.
	function write_entity( ( entity ) this, ( writer ) output ) {
		call :output.write( "&" );
		call :output.write( this.name );
		call :output.write( ";" );
	}

	# Parse an entity-reference node from the specified parser.
	function parse_entity( ( parser ) p ) {
		call p:expect( ascii.amp );
		call p:next_char();
		var ent = new_entity( p:parse_string( ";" ) );
		call p:expect( ascii.semicolon );
		call p:next_char();
		return ent;
	}

	# Return a new comment-node with the specified value.
	function new_comment( value ) {
		var ( comment ) this = $new( comment );
		let this.comment = value;
		let this.write = @write_comment;
		return this;
	}

	# Member function for writing comment-nodes.
	function write_comment( ( comment ) this, ( writer ) output ) {
		call :output.write( "<!--" );
		call :output.write( this.comment );
		call :output.write( "-->" );
	}

	# Parse a comment-node from the specified parser positioned at the first hyphen.
	function parse_comment( ( parser ) p ) {
		call p:expect( ascii.minus );
		call p:next_char();
		call p:expect( ascii.minus );
		call p:next_char();
		var str = p:parse_string( "-" );
		while TRUE {
			call p:expect( ascii.minus );
			if =( p:next_char() ascii.minus ) {
				call p:next_char();
				call p:skip_space();
				call p:expect( ascii.gt );
				call p:next_char();
				return new_comment( str );
			} else {
				let str = $cat( str "-" p:parse_string( "-" ) );
			}
		}
	}

	# Member function for writing doctype-nodes.
	function write_doctype( ( element ) this, ( writer ) output ) {
		call :output.write( "<!" );
		call :output.write( this.name );
		call :output.write( " " );
		var idx;
		var ( list ) atts = this.attributes;
		while <( idx atts.len ) {
			var ( tuple ) att = [ atts.array idx++ ];
			switch idx {
				case 1 {
					call :output.write( att.value );
					continue;
				}
				case 2 {
					call :output.write( " " );
					call :output.write( att.key );
				}
			}
			call :output.write( " \"" );
			call :output.write( att.value );
			call :output.write( "\"" );
		}
		call :output.write( ">" );
	}

	# Parse a doctype-declaration element from the specified parser positioned at 'DOCTYPE'.
	function parse_doctype( ( parser ) p ) {
		if $cmp( "DOCTYPE" p:parse_string( "\11\12\15 " ) ) {
			throw $cat( "Expected 'DOCTYPE' on line " p.line "." );
		}
		call p:skip_space();
		var ( element ) elem = new_element( "DOCTYPE" );
		let elem.write = @write_doctype;
		call list_add( elem.attributes new_tuple( "name" p:parse_string( "\11\12\15 >" ) ) );
		call p:skip_space();
		switch p:parse_string( "\11\12\15 [>" ) {
			case "PUBLIC" {
				call p:skip_space();
				call list_add( elem.attributes new_tuple( "PUBLIC" parse_qname( p ) ) );
				call p:skip_space();
				call list_add( elem.attributes new_tuple( "SYSTEM" parse_qname( p ) ) );
			}
			case "SYSTEM" {
				call p:skip_space();
				call list_add( elem.attributes new_tuple( "SYSTEM" parse_qname( p ) ) );
			}
		}
		call p:skip_space();
		if =( p.current ascii.lbracket ) {
			call p:parse_string( "]" );
			call p:expect( ascii.rbracket );
			call p:next_char();
			call p:skip_space();
		}
		call p:expect( ascii.gt );
		call p:next_char();
		return elem;
	}

	# Parse a declaration-node from the specified parser positioned at the exclamation-mark.
	function parse_decl( ( parser ) p ) {
		call p:expect( ascii.exclam );
		switch p:next_char() {
			case ascii.minus {
				return parse_comment( p );
			}
			case ascii.D {
				return parse_doctype( p );
			}
			case ascii.lbracket {
				return parse_cdata( p );
			}
		}
		throw $cat( "Unsupported declaration on line " p.line "." );
	}

	# Return a list of nodes from the specified parser.
	function parse_node_list( ( parser ) p, template ) {
		var ( element ) parent = new_element( "doc" );
		var ( list ) nodes = new_list( 16 );
		if template {
			call list_add( parent.children parse_node( new_parser( template ) parent ) );
			let parent.template = parent;
		}
		while >e( p.current 0 ) {
			call nodes:add( parse_node( p parent ) );
		}
		return nodes;
	}

	# Insert text nodes to indent output.
	function indent_node_list( ( list ) nodes, linefeed ) {
		var indented, idx;
		while <( idx nodes.len ) {
			var n = [ nodes.array idx ];
			if $instanceof( n element ) {
				let indented = TRUE;
				call nodes:insert( new_text( linefeed ) idx++ );
				if indent_node_list( element.children( n ), $cat( linefeed "  " ) ) {
					call list_add( element.children( n ) new_text( linefeed ) ) ;
				}
			}
			inc idx;
		}
		return indented;
	}
}

program xml_test {
	var ( xml_list ) nodes;
	if <( $argc 2 ) {
		# Document template used to specify permitted element names.
		var template = "<elem><child><x>cdata</x><y/></child></elem>";
		# Parse document against template.
		let nodes = xml_parse_node_list( xml_new_parser( "<?xml version=\"?\"?><!---test--><!DOCTYPE elem PUBLIC \"a\" 'b'[]><elem>text<child x=\"y\"><![CDATA[]txt]]><x/><x>x</x><y/></child>&ent;</elem>\12" ), template );
	} else {
		let nodes = xml_parse_node_list( xml_new_parser( $load( $argv( 1 ) ) ) 0 );
	}

	# Format and output.
	call xml_indent_node_list( nodes "\12" );
	var ( xml_writer ) out = $new( xml_writer $function( ${ ( this, str ) { write str; } } ) );
	var idx;
	while <( idx nodes.len ) {
		call :xml_node.write( [ nodes.array idx++ ] out );
	}
}
