
rem {
	Simple XML parser and object-model.
}

struct ascii {
	# Enumerated ASCII character codes.
	nul soh stx etx eot enq ack bel bs  tab lf  vt  ff cr so si
	dle dc1 dc2 dc3 dc4 nak syn etb can em  sub esc fs gs rs us
	space exclam quote hash dollar percent amp squote
	lparen rparen star plus comma minus dot slash
	d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 colon semicolon lt equals gt question at
	A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
	lbracket backslash rbracket caret underscore backquote
	a b c d e f g h i j k l m n o p q r s t u v w x y z
	lbrace pipe rbrace tilde del
}

struct tuple {
	# Value with associated key, such as a named attribute.
	key, value
}

struct list {
	# Array-backed list.
	array, len
}

struct parser {
	# Supplies characters from a string and tracks line numbers.
	source, idx, current, line
}

struct writer {
	# Provides function to write output.
	write_string
}

struct xml_node {
	# Common node properties and functions.
	write_node
}

struct xml_pi( xml_node ) {
	# Processing-instruction node.
	target, value
}

struct xml_text( xml_node ) {
	# Text node.
	text
}

struct xml_entity( xml_node ) {
	# Entity-reference node.
	name
}

struct xml_comment( xml_node ) {
	# Comment node.
	comment
}

struct xml_element( xml_node ) {
	# Element node, short-tags are enabled for output template has no children.
	name, attributes, children, template, create_element
}

# Return the first index of the specified code-point in str, or -1.
function index_of( str, chr ) {
	var idx;
	while <( idx $len( str ) ) {
		if =( &( $chr( str idx ) 0xFF ) chr ) {
			return idx;
		}
		inc idx;
	}
	return -1;
}

# Return a new tuple, initialized with the specified values.
function new_tuple( key value ) { 
	var ( tuple ) tup = $new( tuple );
	let tup.key = key;
	let tup.value = value;
	return tup;
}

# Return a new empty list with the specified initial capacity.
function new_list( capacity ) {
	var ( list ) this = $new( list );
	let this.array = $array( capacity );
	return this;
}

# Add the specified value to the specified list, increasing the capacity if necessary.
function list_add( ( list ) this, value ) {
	if >e( this.len $len( this.array ) ) {
		var arr = $array( *( this.len 2 ) );
		var idx;
		while <( idx this.len ) {
			let [ arr idx ] = [ this.array idx ];
			inc idx;
		}
		let this.array = arr;
	}
	let [ this.array this.len ] = value;
	let this.len = +( this.len 1 );
}

# Insert the specified value into the specified list at the specified index.
function list_insert( ( list ) this, value, idx ) {
	call list_add( this, 0 );
	while <( idx this.len ) {
		var tmp = [ this.array idx ];
		let [ this.array idx++ ] = value;
		let value = tmp;
	}
}

# Return a new parser for the specified source string.
function new_parser( source ) {
	var ( parser ) this = $new( parser );
	let this.source = source;
	let this.idx = 0;
	let this.current = parser_next_char( this );
	let this.line = 1;
	return this;
}

# Return the next character from the specified parser, or -1 if no more are available.
function parser_next_char( ( parser ) this ) {
	if <( this.idx $len( this.source ) ) {
		let this.current = &( $chr( this.source this.idx ) 0xFF );
		let this.idx = +( this.idx 1 );
		if =( this.current ascii.lf ) {
			let this.line = +( this.line 1 );
		}
	} else {
		let this.current = -1;
	}
	return this.current;
}

# Return a string from the specified parser, up to the end or one of the characters in the specified string.
function parser_parse_string( ( parser ) this, terminators ) {
	var ( list ) out = new_list( 16 );
	while &&( >e( this.current 0 ) <( index_of( terminators this.current ) 0 ) ) {
		call list_add( out, this.current );
		call parser_next_char( this );
	}
	return $sub( out.array 0 out.len );
}

# Return the content of a quoted string from the specified parser.
function parse_xml_qname( ( parser ) p ) {
	var quote = p.current;
	if &&( <>( quote ascii.quote ) <>( quote ascii.squote ) ) {
		throw $cat( "Expected quote character on line " p.line "."  );
	}
	call parser_next_char( p );
	var str = parser_parse_string( p $asc( quote ) );
	call parser_expect( p quote );
	call parser_next_char( p );
	return str;
}

# Skip over space and control-characters from the specified parser.
function parser_skip_space( ( parser ) this ) {
	while &&( >e( this.current 0 ) <e( this.current 32 ) ) {
		call parser_next_char( this );
	}
	return this.current;
}

# Throw an exception if the current character of the specified parser is not the specified code-point.
function parser_expect( ( parser ) this, chr ) {
	if <>( this.current chr ) {
		throw $cat( "Expected '" $asc( chr ) "' on line " this.line "."  );
	}
}

# Member function for writing processing-instruction nodes.
function write_xml_pi( ( xml_pi ) this, ( writer ) output ) {
	call :output.write_string( "<?" );
	call :output.write_string( this.target );
	call :output.write_string( " " );
	call :output.write_string( this.value );
	call :output.write_string( "?>" );
}

# Return a new processing-instruction node.
function new_xml_pi( target, value ) {
	var ( xml_pi ) p = $new( xml_pi );
	let p.target = target;
	let p.value = value;
	let p.write_node = @write_xml_pi;
	return p;
}

# Parse a processing-instruction node from the specified parser positioned at the first question-mark.
function parse_xml_pi( ( parser ) p ) {
	call parser_expect( p ascii.question );
	call parser_next_char( p );
	var target = parser_parse_string( p "\11\12\15 " );
	call parser_skip_space( p );
	var value = parser_parse_string( p "?" );
	call parser_expect( p ascii.question );
	call parser_next_char( p );
	while <>( p.current ascii.gt ) {
		let value = $cat( value "?" parser_parse_string( p "?" ) );
		call parser_expect( p ascii.question );
		call parser_next_char( p );
	}
	call parser_next_char( p );
	return new_xml_pi( target value );
}

# Member function for writing element nodes and their children.
function write_xml_element( ( xml_element ) this, ( writer ) output ) {
	call :output.write_string( "<" );
	call :output.write_string( this.name );
	var idx;
	var ( list ) atts = this.attributes;
	while <( idx atts.len ) {
		var ( tuple ) att = [ atts.array idx++ ];
		call :output.write_string( " " );
		call :output.write_string( att.key );
		call :output.write_string( "=\"" );
		call :output.write_string( att.value );
		call :output.write_string( "\"" );
	}
	var ( list ) children = this.children;
	if &&( this.template <e( list.len( xml_element.children( this.template ) ) 0 ) <e( children.len 0 ) ) {
		call :output.write_string( "/>" );
	} else {
		call :output.write_string( ">" );
		let idx = 0;
		while <( idx children.len ) {
			call :xml_node.write_node( [ children.array idx++ ], output );
		}
		call :output.write_string( "</" );
		call :output.write_string( this.name );
		call :output.write_string( ">" );
	}
}

# Member function to create a new element, this may be replaced to create custom elements.
function create_xml_element( ( xml_element ) this, name ) {
	if this.template {
		var ( list ) children = xml_element.children( this.template );
		var idx;
		while <( idx children.len ) {
			var child = [ children.array idx++ ];
			if $instanceof( child xml_element ) {
				if $eq( xml_element.name( child ) name ) {
					var ( xml_element ) elem = new_xml_element( name );
					let elem.template = child;
					return elem;
				}
			}
		}
		throw $cat( "Element '" name "' not permitted as child of '" this.name "'." );
	}
	return new_xml_element( name );
}

# Return a new element with the specified name.
function new_xml_element( name ) {
	var ( xml_element ) elem = $new( xml_element );
	let elem.name = name;
	let elem.write_node = @write_xml_element;
	let elem.attributes = new_list( 4 );
	let elem.children = new_list( 4 );
	let elem.create_element = @create_xml_element;
	return elem;
}

# Parse an appropriately-typed node using the specified parser and parent element.
function parse_xml_node( ( parser ) p, ( xml_element ) parent ) {
	switch p.current {
		case ascii.lt {
			switch parser_next_char( p ) {
				case ascii.exclam {
					return parse_xml_decl( p );
				}
				case ascii.question {
					return parse_xml_pi( p );
				}
				case ascii.slash {
					return 0;
				}
			}
		}
		case ascii.amp {
			return parse_xml_entity( p );
		}
		default {
			return new_xml_text( parser_parse_string( p, "&<" ) );
		}
	}
	var ( xml_element ) elem = :parent.create_element( parser_parse_string( p, "\11\12\15 />" ) );
	call parser_skip_space( p );
	while <( index_of( "/>" p.current ) 0 ) {
		var name = parser_parse_string( p, "\11\12\15 =" );
		call parser_skip_space( p );
		call parser_expect( p ascii.equals );
		call parser_next_char( p );
		call parser_skip_space( p );
		call list_add( elem.attributes new_tuple( name parse_xml_qname( p ) ) );
		call parser_skip_space( p );
	}
	switch p.current {
		case ascii.slash {
			call parser_next_char( p );
		}
		case ascii.gt {
			call parser_next_char( p );
			var child = parse_xml_node( p, elem );
			while child {
				call list_add( elem.children child );
				let child = parse_xml_node( p, elem );
			}
			call parser_expect( p ascii.slash );
			call parser_next_char( p );
			let name = parser_parse_string( p, "\11\12\15 >" );
			if $cmp( elem.name name ) {
				throw $cat( "Unexpected close tag '</" name ">' on line " p.line "." );
			}
		}
	}
	call parser_skip_space( p );
	call parser_expect( p ascii.gt );
	call parser_next_char( p );
	return elem;
}

# Member function for writing text-nodes.
function write_xml_text( ( xml_text ) this, ( writer ) output ) {
	call :output.write_string( this.text );
}

# Return a new text-node with the specified value.
function new_xml_text( text ) {
	var ( xml_text ) this = $new( xml_text );
	let this.text = text;
	let this.write_node = @write_xml_text;
	return this;
}

# Member function for writing text-nodes within cdata sections.
function write_xml_cdata( ( xml_text ) this, ( writer ) output ) {
	call :output.write_string( "<![CDATA[" );
	call :output.write_string( this.text );
	call :output.write_string( "]]>" );
}

# Return a new text-node which writes content in a cdata section.
function new_xml_cdata( cdata ) {
	var ( xml_text ) this = $new( xml_text );
	let this.text = cdata;
	let this.write_node = @write_xml_cdata;
	return this;
}

# Parse a cdata node from the specified parser positioned at "CDATA[".
function parse_xml_cdata( ( parser ) p ) {
	call parser_expect( p ascii.lbracket );
	call parser_next_char( p );
	if $cmp( "CDATA" parser_parse_string( p, "[" ) ) {
		throw $cat( "Expected 'CDATA' on line " p.line "." );
	}
	call parser_next_char( p );
	var str = parser_parse_string( p, "]" );
	while TRUE {
		call parser_expect( p ascii.rbracket );
		if =( parser_next_char( p ) ascii.rbracket ) {
			call parser_next_char( p );
			call parser_expect( p ascii.gt );
			call parser_next_char( p );
			return new_xml_cdata( str );
		} else {
			let str = $cat( str "]" parser_parse_string( p "]" ) );
		}
	}
}

# Member function for writing entity-references.
function write_xml_entity( ( xml_entity ) this, ( writer ) output ) {
	call :output.write_string( "&" );
	call :output.write_string( this.name );
	call :output.write_string( ";" );
}

# Return a new entity-reference node with the specified value.
function new_xml_entity( name ) {
	var ( xml_entity ) this = $new( xml_entity );
	let this.name = name;
	let this.write_node = @write_xml_entity;
	return this;
}

# Parse an entity-reference node from the specified parser.
function parse_xml_entity( ( parser ) p ) {
	call parser_expect( p ascii.amp );
	call parser_next_char( p );
	var ent = new_xml_entity( parser_parse_string( p ";" ) );
	call parser_expect( p ascii.semicolon );
	call parser_next_char( p );
	return ent;
}

# Member function for writing comment-nodes.
function write_xml_comment( ( xml_comment ) this, ( writer ) output ) {
	call :output.write_string( "<!--" );
	call :output.write_string( this.comment );
	call :output.write_string( "-->" );
}

# Return a new comment-node with the specified value.
function new_xml_comment( comment ) {
	var ( xml_comment ) this = $new( xml_comment );
	let this.comment = comment;
	let this.write_node = @write_xml_comment;
	return this;
}

# Parse a comment-node from the specified parser positioned at the first hyphen.
function parse_xml_comment( ( parser ) p ) {
	call parser_expect( p ascii.minus );
	call parser_next_char( p );
	call parser_expect( p ascii.minus );
	call parser_next_char( p );
	var str = parser_parse_string( p, "-" );
	while TRUE {
		call parser_expect( p ascii.minus );
		if =( parser_next_char( p ) ascii.minus ) {
			call parser_next_char( p );
			call parser_skip_space( p );
			call parser_expect( p ascii.gt );
			call parser_next_char( p );
			return new_xml_comment( str );
		} else {
			let str = $cat( str "-" parser_parse_string( p "-" ) );
		}
	}
}

# Member function for writing doctype-nodes.
function write_xml_doctype( ( xml_element ) this, ( writer ) output ) {
	call :output.write_string( "<!" );
	call :output.write_string( this.name );
	call :output.write_string( " " );
	var idx;
	var ( list ) atts = this.attributes;
	while <( idx atts.len ) {
		var ( tuple ) att = [ atts.array idx++ ];
		switch idx {
			case 1 {
				call :output.write_string( att.value );
				continue;
			}
			case 2 {
				call :output.write_string( " " );
				call :output.write_string( att.key );
			}
		}
		call :output.write_string( " \"" );
		call :output.write_string( att.value );
		call :output.write_string( "\"" );
	}
	call :output.write_string( ">" );
}

# Parse a doctype-declaration element from the specified parser positioned at 'DOCTYPE'.
function parse_xml_doctype( ( parser ) p ) {
	if $cmp( "DOCTYPE" parser_parse_string( p "\11\12\15 " ) ) {
		throw $cat( "Expected 'DOCTYPE' on line " p.line "." );
	}
	call parser_skip_space( p );
	var ( xml_element ) elem = new_xml_element( "DOCTYPE" );
	let elem.write_node = @write_xml_doctype;
	call list_add( elem.attributes new_tuple( "name" parser_parse_string( p "\11\12\15 " ) ) );
	call parser_skip_space( p );
	switch parser_parse_string( p "\11\12\15 [>" ) {
		case "PUBLIC" {
			call parser_skip_space( p );
			call list_add( elem.attributes new_tuple( "PUBLIC" parse_xml_qname( p ) ) );
			call parser_skip_space( p );
			call list_add( elem.attributes new_tuple( "SYSTEM" parse_xml_qname( p ) ) );
		}
		case "SYSTEM" {
			call parser_skip_space( p );
			call list_add( elem.attributes new_tuple( "SYSTEM" parse_xml_qname( p ) ) );
		}
	}
	call parser_skip_space( p );
	if =( p.current ascii.lbracket ) {
		call parser_parse_string( p "]" );
		call parser_expect( p ascii.rbracket );
		call parser_next_char( p );
		call parser_skip_space( p );
	}
	call parser_expect( p ascii.gt );
	call parser_next_char( p );
	return elem;
}

# Parse a declaration-node from the specified parser positioned at the exclamation-mark.
function parse_xml_decl( ( parser ) p ) {
	call parser_expect( p ascii.exclam );
	switch parser_next_char( p ) {
		case ascii.minus {
			return parse_xml_comment( p );
		}
		case ascii.D {
			return parse_xml_doctype( p );
		}
		case ascii.lbracket {
			return parse_xml_cdata( p );
		}
	}
	throw $cat( "Unsupported declaration on line " p.line "." );
}

# Return a list of nodes from the specified parser.
function parse_xml_node_list( ( parser ) p, template ) {
	var ( xml_element ) parent = new_xml_element( "doc" );
	var ( list ) nodes = new_list( 16 );
	if template {
		call list_add( parent.children parse_xml_node( new_parser( template ) parent ) );
		let parent.template = parent;
	}
	while >e( p.current 0 ) {
		call list_add( nodes parse_xml_node( p parent ) );
	}
	return nodes;
}

# Insert text nodes to indent output.
function indent_xml_node_list( ( list ) nodes, linefeed ) {
	var indented, idx;
	while <( idx nodes.len ) {
		var n = [ nodes.array idx ];
		if $instanceof( n xml_element ) {
			let indented = TRUE;
			call list_insert( nodes new_xml_text( linefeed ) idx++ );
			if indent_xml_node_list( xml_element.children( n ), $cat( linefeed "  " ) ) {
				call list_add( xml_element.children( n ) new_xml_text( linefeed ) ) ;
			}
		}
		inc idx;
	}
	return indented;
}

# Return a simple writer that writes to standard-output.
function new_writer() {
	var ( writer ) w = $new( writer );
	let w.write_string = $function( ${ ( this, str ) { write str; } } );
	return w;
}

program xml {
	# Document template used to specify permitted element names.
	var template = "<elem><child><x>cdata</x><y/></child></elem>";
	# Parse document against template.
	var ( list ) nodes = parse_xml_node_list( new_parser( "<?xml version=\"?\"?><!---test--><!DOCTYPE elem PUBLIC \"a\" 'b'[]><elem>text<child x=\"y\"><![CDATA[]txt]]><x/><x>x</x><y/></child>&ent;</elem>\12" ), template );
	# Format and output.
	call indent_xml_node_list( nodes "\12" );
	var ( writer ) out = new_writer();
	var idx;
	while <( idx nodes.len ) {
		call :xml_node.write_node( [ nodes.array idx++ ] out );
	}
}
