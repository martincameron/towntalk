
rem {
	Very simple polyphonic synthesizer for TTFX.
}

function unpack( buf, idx ) {
	var value, end;
	let end = +( idx 4 );
	while <( idx end ) {
		let value = +( *( value 256 ) &( $chr( buf idx ) 0xFF ) );
		inc idx;
	}
	return value;
}

function trim( str ) {
	var offset, end;
	let end = -( $len( str ) 1 );
	while &&( >e( end 0 ) <( $chr( str, end ) 33 ) ) {
		let end = -( end 1 );
	}
	return $sub( str, offset, +( end 1 ) );
}

function load_song( song, names ) {
	var e;
	try {
		return load_tmf( song, names );
	} catch e {
		return load_mod( song, names );
	}
}

function load_tmf( tmf, names ) {
	var offset, sequence, length, idx, loopidx, looplen;
	if $cmp( $sub( tmf, 0, 4 ) "TMF0" ) {
		throw "Not a TMF file.";
	}
	if names {
		dim [ names 64 ];
		set [ names 0 ] = trim( $sub( tmf 8 32 ) );
	}
	let offset = *( 32 64 );
	let sequence = $sub( tmf, offset, unpack( tmf, 4 ) );
	let offset = +( offset $len( sequence ) );
	let idx = 1;
	while <( idx 64 ) {
		let loopidx = unpack( tmf, *( idx 32 ) );
		let looplen = unpack( tmf, +( *( idx 32 ) 4 ) );
		if names {
			set [ names idx ] = trim( $sub( tmf +( *( idx 32 ) 8 ) 24 ) );
		}
		let length = +( loopidx looplen );
		if length {
			fxsample idx, $sub( tmf offset length ), loopidx, looplen;
			let offset = +( offset length );
		}
		inc idx;
	}
	return sequence;
}

function u16be( str, idx ) {
	return +( *( &( $chr( str idx ) 0xFF ) 256 ) &( $chr( str +( idx 1 ) ) 0xFF ) );
}

function load_mod( mod, names ) {
	var offset, patterns, length, instrument, loopidx, looplen;
	if $cmp( $sub( mod, 1080, 4 ) "M.K." ) {
		throw "Not a MOD file.";
	}
	if names {
		dim [ names 32 ];
		set [ names 0 ] = trim( $sub( mod, 0, 20 ) );
	}
	let offset = 952;
	while <( offset 1080 ) {
		if <e( patterns &( $chr( mod offset ) 0x7F ) ) {
			let patterns = +( &( $chr( mod offset ) 0x7F ) 1 );
		}
		inc offset;
	}
	let offset = +( 1084 *( patterns 1024 ) );
	let instrument = 1;
	while <( instrument 32 ) {
		let length = *( u16be( mod, +( *( instrument 30 ) 12 ) ) 2 );
		let loopidx = *( u16be( mod, +( *( instrument 30 ) 16 ) ) 2 );
		let looplen = *( u16be( mod, +( *( instrument 30 ) 18 ) ) 2 );
		if <( looplen 4 ) {
			let loopidx = length;
			let looplen = 0;
		}
		if names {
			set [ names instrument ] = trim( $sub( mod -( *( instrument 30 ) 10 ) 22 ) );
		}
		if length {
			fxsample instrument, $sub( mod offset length ), loopidx, looplen;
			let offset = +( offset length );
		}
		inc instrument;
	}
	return "";
}

function timestretch( key ) {
	var keyfreq, freq, seq, off, idx;
	let keyfreq = $array( ${
		16744, 17740, 18795, 19912, 21096, 22351, 23680, 25088, 26579, 28160, 29834, 31608, 33488
	} );
	let key = /( key 8 );
	let freq = >>( *( [ keyfreq %( key 12 ) ] 32 ) -( 10 /( key 12 ) ) );
	let seq = $array( 1024 );
	while <( idx $len( seq ) ) {
		set [ seq idx ] = +( 0x30000000 *( off 256 ) );
		let off = &( +( off /( *( freq 6 ) 50 ) ) 0xFFFFF );
		inc idx;
		set [ seq idx ] = 0xF006;
		inc idx;
	}
	return $pack( seq );
}

function fade() {
	return $pack( $array( ${ 0x6800F010 0x6000F010 0x5800F010 0x5000F010 0x4800F010 0x4000 } ) );
}

function map_key( keymap, key ) {
	if &&( >( key 47 ) <( key 96 ) ) {
		let key = [ keymap -( key 48 ) ];
	} else {
		if &&( >( key 96 ) <( key 123 ) ) {
			# Lower case.
			let key = [ keymap -( key 80 ) ];
		} else {
			let key = 0;
		}
	}
	return key;
}

program midi {
	var sequence, idx, name, names;
	var cmd, chn, key, vel, ins, voc, va;
	var keyvoice, voicekey, keymap, keyfreq, bank, c0;
	var attack, decay;
	if >( $argc 1 ) {
		let attack = "";
		let decay = fade();
		let keymap = $array( ${
			#   0   1   2   3   4   5   6   7   8   9   :   ;   <   =   >   ?   @
			   75,  0, 61, 63,  0, 66, 68, 70,  0, 73,  0,  0,  0, 78,  0,  0,  0,
			#   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q
			    0, 55, 52, 51, 64,  0, 54, 56, 72, 58,  0,  0, 59, 57, 74, 76, 60,
			#   R   S   T   U   V   W   X   Y   Z   [   \   ]
			   65, 49, 67, 71, 53, 62, 50, 69, 48, 77, 47, 79
		} );
		let names = $array( 0 );
		let sequence = load_song( $load( $argv( 1 ) ), names );
		print $cat( "Song name: " [ names 0 ] );
		print $cat( "Sequence length: " $len( sequence ) " bytes.");
		let idx = 1;
		while <( idx $len( names ) ) {
			let name = [ names idx ];
			if >( $len( name ) 0 ) {
				print $cat( "Instrument " idx ": " name );
			}
			inc idx;
		}
		# Open window to accept keyboard events.
		fxopen 640, 480, "test";
		# Open midi device.
		#fxmidi "hw:2,0,0";
		fxaudio 960;
		#fxplay 0, sequence;
		#fxqueue 0, sequence;
		let keyvoice = $array( 128 );
		let voicekey = $array( 32 );
		while TRUE {
			let c0 = 480;
			let cmd = 0;
			switch $fxwait {
				case FX_KEYDOWN {
					switch $keyboard {
						case 27 {
							# Escape, exit timestretch mode.
							let attack = "";
							let decay = fade();
						}
						case 280 {
							# Page up, next sample bank.
							let bank = +( bank 10 );
							if >( bank 50 ) {
								let bank = 50;
							}
						}
						case 281 {
							# Page down, previous sample bank.
							let bank = -( bank 10 );
							if <( bank 0 ) {
								let bank = 0;
							}
						}
					}
					if &&( >( $keyboard 281 ) <( $keyboard 294 ) ) {
						# Function key, select sample.
						let cmd = 0xC;
						let key = +( bank -( $keyboard 282 ) );
					} else {
						if &( $keyshift 0x2000 ) {
							# Drop an octave if caps lock on.
							let c0 = 384;
						}
						let key = map_key( keymap, $keyboard );
						if >( key 0 ) {
							let cmd = 0x9;
							let chn = 0;
							let vel = 64;
						}
					}
				}
				case FX_KEYUP {
					let key = map_key( keymap, $keyboard );
					if >( key 0 ) {
						let cmd = 0x9;
						let chn = 0;
						let vel = 0;
					}
				}
				case FX_MIDI {
					print $hex( $midimsg );
					let cmd = >>( $midimsg 20 );
					let chn = &( >>( $midimsg 16 ) 0xF );
					let key = &( >>( $midimsg 8 ) 0x7F );
					if =( cmd 0x8 ) {
						let cmd = 0x9;
						let vel = 0;
					} else {
						let vel = &( $midimsg 0x7F );
					}
				}
			}
			switch cmd {
				case 0x9 {
					let voc = [ keyvoice key ];
					if >( vel 0 ) {
						if =( voc 0 ) {
							if !( =( [ voicekey va ] key ) ) {
								let va = +( 16 %( +( va 1 ) 16 ) );
								set [ voicekey va ] = key;
							}
							let voc = va;
							set [ keyvoice key ] = voc;
						}
						let key = +( c0 *( -( key 60 ) 8 ) );
						if &( $keyshift 0x3 ) {
							# Enable time-stretching if shift pressed.
							let attack = timestretch( key );
							let decay = $pack( 0x4000 );
						}
						fxplay voc, $cat( $pack( 0x8000 ) $pack( +( +( 0x10000000 *( key 65536 ) ) *( +( ins 1 ) 256 ) ) ) );
						fxplay voc, attack;
					} else {
						if =( [ voicekey voc ] key ) {
							# Key off.
							fxplay voc, decay;
						}
						set [ keyvoice key ] = 0;
					}
				}
				case 0xC {
					let ins = &( key 0x3F );
				}
			}
		}
	} else {
		error $cat( "Usage ttfx " $argv( 0 ) " song.tmf" );
	}
}
