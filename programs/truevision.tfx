
# Return the width of the specified TGA image file.
function truevision_get_width( tga ) {
	return +( *( $chr( tga 13 ) 256 ) $chr( tga 12 ) );
}

# Return the height of the specified TGA image file.
function truevision_get_height( tga ) {
	return +( *( $chr( tga 15 ) 256 ) $chr( tga 14 ) );
}

# Return the RGBA pixel data from the specified TGA image file.
function truevision_get_pixels( tga ) {
	var imgtype, palbits, offset, palette, idx, end, clr, alpha, pixels, len, run;
	let imgtype = $chr( tga 2 );
	if !( &&( =( $chr( tga 1 ) 1 ) ||( =( imgtype 1 ) =( imgtype 9 ) ) ) ) {
		throw $cat( "Unsupported image type (" imgtype "). Expected colour-mapped image." );
	}
	let palbits = $chr( tga 7 );
	if !( ||( =( palbits 24 ) =( palbits 32 ) ) ) {
		throw $cat( "Unsupported palette entry size (" palbits " bits)." );
	}
	if !( =( $chr( tga 16 ) 8 ) ) {
		throw "Unsupported image data. Expected 8 bits per pixel.";
	}
	# Skip Image ID area.
	let offset = +( $chr( tga 0 ) 18 );
	# Read palette.
	let palette = $array( 256 );
	let idx = $chr( tga 3 );
	let end = +( idx +( *( $chr( tga 6 ) 256 ) $chr( tga 5 ) ) );
	while <( idx end ) {
		# Read palette entry.
		let clr = $chr( tga +( offset 2 ) );
		let clr = +( *( clr 256 ) $chr( tga +( offset 1 ) ) );
		let clr = +( *( clr 256 ) $chr( tga offset ) );
		let offset = +( offset 3 );
		if =( palbits 32 ) {
			let alpha = $chr( tga offset );
			inc offset;
		} else {
			let alpha = 0xFF;
		}
		set [ palette idx ] = +( *( clr 256 ) alpha );
		inc idx;
	}
	# Read image data.
	let pixels = $array( *( truevision_get_width( tga ) truevision_get_height( tga ) ) );
	let idx = 0;
	let len = $len( pixels );
	if =( imgtype 1 ) {
		# Uncompressed.
		while <( idx len ) {
			# Lookup palette index.
			set [ pixels idx ] = [ palette &( $chr( tga offset ) 0xFF ) ];
			inc offset;
			inc idx;
		}
	} else {
		# Run-length coding.
		while <( idx len ) {
			let run = &( $chr( tga offset ) 0xFF );
			inc offset;
			if >( run 127 ) {
				# Run-length packet.
				let end = -( +( idx run ) 127 );
				let clr = [ palette &( $chr( tga offset ) 0xFF ) ];
				inc offset;
				while <( idx end ) {
					set [ pixels idx ] = clr;
					inc idx;
				}
			} else {
				# Literal packet.
				let end = +( +( idx run ) 1 );
				while <( idx end ) {
					set [ pixels idx ] = [ palette &( $chr( tga offset ) 0xFF ) ];
					inc offset;
					inc idx;
				}
			}
		}
	}
	return pixels;
}

program truevision {
	var tga, width, height, pixels;
	let tga = $load( $argv( 1 ) );
	
	let width = truevision_get_width( tga );
	let height = truevision_get_height( tga );
	let pixels = truevision_get_pixels( tga );
	
	fxopen width height "Truevision";
	fxsurface 0, width, height, pixels;
	fxblit 0, 0, 0, width, height, 0, 0;
	fxshow;
	
	while TRUE {
		call $fxwait;
	}
}
