
function assert_equals( expected, value, elem ) {
	if $cmp( expected value ) {
		throw $str( "Assertion failed on line " $line( elem )
			". Expected '" expected "', actual '" value "'." );
	}
}

function assert_throws( expected, elem ) {
	var err;
	try {
		call :( $function( elem ) );
	} catch err {
		let err = $str( err );
		if <e( $len( expected ) $len( err ) ) {
			let err = $sub( err 0 $len( expected ) );
		}
	}
	call assert_equals( expected, err, elem );
}

function testlet() {
	call assert_throws( "Invalid destination after 'let'", ${ () { asm { let } } } );
	call assert_throws( "Expected '=' after destination", ${ () { asm { let a } } } );
	call assert_throws( "Invalid source after '='", ${ () { asm { let a = } } } );
}

function testletv_i() {
	var a = 0;
	asm { let a = 1; }
	call assert_equals( 1, a, ${-} );
	call assert_throws( "Invalid local variable 'x'", ${ () { asm { let x = 0; } } } );
	call assert_throws( "Invalid immediate '0x'", ${ () { var a; asm { let a = 0x; } } } );
}

function testletv_v() {
	var a = 1, b = 0;
	asm { let b = a; }
	call assert_equals( a, b, ${-} );
	call assert_throws( "Invalid local variable 'x'", ${ () { asm { let x = a; } } } );
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let a = x; } } } );
}

function testletv_a() {
	var a, b = 1, arr = $array( ${ 1, 2 } );
	asm { let a = [ arr 0 ]; }
	call assert_equals( 1, a, ${-} );
	asm { let a = [ arr b ]; }
	call assert_equals( 2, a, ${-} );
	asm { let a = [ arr b++ ]; }
	call assert_equals( 2, a, ${-} );
	call assert_equals( 2, b, ${-} );
	call assert_throws( "Not an array or index", ${ () { var a; asm { let a = [ a 0 ]; } } } );
	call assert_throws( "Not an array or index", ${ () { var a; asm { let a = [ a a ]; } } } );
	call assert_throws( "Not an array or index", ${ () { var a; asm { let a = [ a a++ ]; } } } );
	call assert_throws( "Not an array or index", ${ () { var a = $array( 0 ); asm { let a = [ a -1 ]; } } } );
	call assert_throws( "Not an array or index", ${ () { var a = $array( 0 ); asm { let a = [ a a ]; } } } );
	call assert_throws( "Not an array or index", ${ () { var a = $array( 0 ); asm { let a = [ a a++ ]; } } } );
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let x = [ a 0 ]; } } } );
	call assert_throws( "Invalid index expression", ${ () { var a; asm { let a = []; } } } );
	call assert_throws( "Invalid index expression", ${ () { var a; asm { let a = [ a ]; } } } );
	call assert_throws( "Invalid index expression", ${ () { var a; asm { let a = [ a 0 0 ]; } } } );
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let a = [ x 0 ]; } } } );
	# letv_ai
	call assert_throws( "Invalid immediate '0x'", ${ () { var a; asm { let a = [ a 0x ]; } } } );
	# letv_av
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let a = [ a x ]; } } } );
}

function testletv_opr() {
	var a, minusone = -1, one = 1, two = 2, three = 3;
	# letv_opr_vi
	asm { let a = +( a 1 ); }
	call assert_equals( 1, a, ${-} );
	asm { let a = -( a -1 ); }
	call assert_equals( 2, a, ${-} );
	asm { let a = *( a 3 ); }
	call assert_equals( 6, a, ${-} );
	asm { let a = /( a 2 ); }
	call assert_equals( 3, a, ${-} );
	asm { let a = %( a 2 ); }
	call assert_equals( 1, a, ${-} );
	asm { let a = <<( a 2 ); }
	call assert_equals( 4, a, ${-} );
	asm { let a = >>( a 1 ); }
	call assert_equals( 2, a, ${-} );
	asm { let a = &( a 1 ); }
	call assert_equals( 0, a, ${-} );
	asm { let a = |( a 1 ); }
	call assert_equals( 1, a, ${-} );
	asm { let a = ^( a 1 ); }
	call assert_equals( 0, a, ${-} );
	# letv_opr_vv
	asm { let a = +( a one ); }
	call assert_equals( 1, a, ${-} );
	asm { let a = -( a minusone ); }
	call assert_equals( 2, a, ${-} );
	asm { let a = *( a three ); }
	call assert_equals( 6, a, ${-} );
	asm { let a = /( a two ); }
	call assert_equals( 3, a, ${-} );
	asm { let a = %( a two ); }
	call assert_equals( 1, a, ${-} );
	asm { let a = <<( a two ); }
	call assert_equals( 4, a, ${-} );
	asm { let a = >>( a one ); }
	call assert_equals( 2, a, ${-} );
	asm { let a = &( a one ); }
	call assert_equals( 0, a, ${-} );
	asm { let a = |( a one ); }
	call assert_equals( 1, a, ${-} );
	asm { let a = ^( a one ); }
	call assert_equals( 0, a, ${-} );
	# letv_opr
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let a = +( x a ); } } } );
	# letv_opr_vi
	call assert_throws( "Integer division by zero.", ${ () { var a; asm { let a = /( a 0 ); } } } );
	call assert_throws( "Modulo division by zero.", ${ () { var a; asm { let a = %( a 0 ); } } } );
	# letv_opr_vv
	call assert_throws( "Integer division by zero.", ${ () { var a; asm { let a = /( a a ); } } } );
	call assert_throws( "Modulo division by zero.", ${ () { var a; asm { let a = %( a a ); } } } );
	# letv_opr_v
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let x = +( a 1 ); } } } );
	call assert_throws( "Invalid operands", ${ () { var a; asm { let a = +(); } } } );
	call assert_throws( "Invalid operands", ${ () { var a; asm { let a = +( a ); } } } );
	call assert_throws( "Invalid operands", ${ () { var a; asm { let a = +( a a 1 ); } } } );
	# letv_opr_vi
	call assert_throws( "Invalid operator 'x'", ${ () { var a; asm { let a = x( a 1 ); } } } );
	call assert_throws( "Invalid immediate '0x'", ${ () { var a; asm { let a = +( a 0x ); } } } );
	# letv_opr_vv
	call assert_throws( "Invalid operator 'x'", ${ () { var a; asm { let a = x( a a ); } } } );
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let a = +( a x ); } } } );
}

function testleta() {
	var a, b, arr = $array( 1 );
	# letav_i
	asm { let [ arr a ] = 1; }
	call assert_equals( 1, [ arr 0 ], ${-} );
	# letai_v
	let a = 2;
	asm { let [ arr 0 ] = a; }
	call assert_equals( 2, [ arr 0 ], ${-} );
	# letav_v
	let a = 0;
	asm { let [ arr a ] = a; }
	call assert_equals( 0, [ arr 0 ], ${-} );
	# letap_v
	let a = 0;
	let b = 1;
	asm { let [ arr a++ ] = b; }
	call assert_equals( 1, [ arr 0 ], ${-} );
	call assert_equals( 1, a, ${-} );
	# letav_i
	call assert_throws( "Not an array or index", ${ () { var a; asm { let [ a a ] = 0; } } } );
	call assert_throws( "Not an array or index", ${ () { var a = $array( 0 ); asm { let [ a a ] = 0; } } } );
	# letai_v
	call assert_throws( "Not an array or index", ${ () { var a; asm { let [ a 0 ] = a; } } } );
	call assert_throws( "Not an array or index", ${ () { var a = $array( 0 ); asm { let [ a 0 ] = a; } } } );
	# letav_v
	call assert_throws( "Not an array or index", ${ () { var a; asm { let [ a a ] = a; } } } );
	call assert_throws( "Not an array or index", ${ () { var a = $array( 0 ); asm { let [ a a ] = a; } } } );
	# letap_v
	call assert_throws( "Not an array or index", ${ () { var a; asm { let [ a a++ ] = a; } } } );
	call assert_throws( "Not an array or index", ${ () { var a = $array( 0 ); asm { let [ a a++ ] = a; } } } );
	# leta
	call assert_throws( "Invalid local variable 'x'", ${ () { asm { let [ x 0 ] = 0; } } } );
	call assert_throws( "Invalid index expression", ${ () { asm { let [] = 0; } } } );
	call assert_throws( "Invalid index expression", ${ () { var a; asm { let [ a ] = 0; } } } );
	call assert_throws( "Invalid index expression", ${ () { var a; asm { let [ a 0 0 ] = 0; } } } );
	# letai_v
	call assert_throws( "Invalid immediate '0x'", ${ () { var a; asm { let [ a 0x ] = a; } } } );
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let [ a 0 ] = x; } } } );
	# letav_i
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let [ a x ] = 0; } } } );
	call assert_throws( "Invalid immediate '0x'", ${ () { var a; asm { let [ a a ] = 0x; } } } );
	# letav_v
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let [ a a ] = x; } } } );
	# letap_v
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { let [ a a++ ] = x; } } } );
}

function testhalt() {
	var a;
	asm { halt; let a = 1; }
	call assert_equals( 0, a, ${-} );
	call assert_throws( "Expected ';' after 'halt'", ${ () { asm { halt }  } } );
}

function testjump() {
	var a = 0, b = 1;
	# jump_lt
	asm { jump <( a b ) label; let a = 1; label: }
	call assert_equals( 0, a, ${-} );
	asm { let a = 1; jump <( b a ) label; let a = 0; label: }
	call assert_equals( 0, a, ${-} );
	# jump_le
	asm { jump <e( a b ) label; let a = 1; label: }
	call assert_equals( 0, a, ${-} );
	asm { let a = 2; jump <e( a b ) label; let a = 0; label: }
	call assert_equals( 0, a, ${-} );
	# jump_eq
	asm { jump =( a a ) label; let a = 1; label: }
	call assert_equals( 0, a, ${-} );
	asm { let a = 2; jump =( a b ) label; let a = 0; label: }
	call assert_equals( 0, a, ${-} );
	# jump_ne
	asm { jump <>( a b ) label; let a = 1; label: }
	call assert_equals( 0, a, ${-} );
	asm { let a = b; jump <>( a b ) label; let a = 0; label: }
	call assert_equals( 0, a, ${-} );
	# jump_ge
	asm { jump >e( b a ) label; let a = 1; label: }
	call assert_equals( 0, a, ${-} );
	asm { let a = 2; jump >e( b a ) label; let a = 0; label: }
	call assert_equals( 0, a, ${-} );
	# jump_gt
	asm { jump >( b a ) label; let a = 1; label: }
	call assert_equals( 0, a, ${-} );
	asm { let a = 1; jump >( a b ) label; let a = 0; label: }
	call assert_equals( 0, a, ${-} );
	# jump
	call assert_throws( "Invalid label ':'", ${ () { asm { : }  } } );
	call assert_throws( "Expected jump condition", ${ () { asm { jump }  } } );
	call assert_throws( "Expected '(' after jump condition", ${ () { asm { jump < }  } } );
	call assert_throws( "Invalid jump condition", ${ () { asm { jump <() label; label: }  } } );
	call assert_throws( "Invalid jump condition", ${ () { var a; asm { jump <( a ) label; label: }  } } );
	call assert_throws( "Invalid jump condition", ${ () { var a; asm { jump <( a a a ) label; label: }  } } );
	call assert_throws( "Expected label after jump condition", ${ () { var a; asm { jump <( a a ) }  } } );
	call assert_throws( "Invalid jump label ':'", ${ () { var a; asm { jump <( a a ) :; }  } } );
	call assert_throws( "Invalid jump condition", ${ () { var a; asm { jump x( a a ) label; label: }  } } );
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { jump <( x a ) label; label: }  } } );
	call assert_throws( "Invalid local variable 'x'", ${ () { var a; asm { jump <( a x ) label; label: }  } } );
	call assert_throws( "Undeclared jump label 'x'", ${ () { var a; asm { jump <( a a ) x; label: }  } } );
}

function testchr() {
	var a, b, str = "a";
	# letv_chr_vi
	asm { let b = $chr( str 0 ); }
	call assert_equals( $chr( str, 0 ), b, ${-} );
	# letv_chr_vv
	let b = 0;
	asm { let b = $chr( str a ); }
	call assert_equals( $chr( str, 0 ), b, ${-} );
	# letv_chr_vp
	let b = 0;
	asm { let b = $chr( str a++ ); }
	call assert_equals( $chr( str, 0 ), b, ${-} );
	call assert_equals( 1, a, ${-} );
	# letv_chr_vi
	call assert_throws( "Not a string or index", ${ () { var a; asm { let a = $chr( a 0 ); } } } );
	# letv_chr_vv
	call assert_throws( "Not a string or index", ${ () { var a = ""; asm { let a = $chr( a a ); } } } );
	# letv_chr_vp
	call assert_throws( "Not a string or index", ${ () { var a = ""; asm { let a = $chr( a a++ ); } } } );
}

function testunpack() {
	var a, b, str = $pack( -1 );
	# letv_unp_vi
	asm { let b = $unpack( str 0 ); }
	call assert_equals( -1, b, ${-} );
	# letv_unp_vv
	let b = 0;
	asm { let b = $unpack( str a ); }
	call assert_equals( -1, b, ${-} );
	# letv_unp_vp
	let b = 0;
	asm { let b = $unpack( str a++ ); }
	call assert_equals( -1, b, ${-} );
	call assert_equals( 1, a, ${-} );
	# letv_unp_vi
	call assert_throws( "Not a string or index", ${ () { var a; asm { let a = $unpack( a 0 ); } } } );
	# letv_unp_vv
	call assert_throws( "Not a string or index", ${ () { var a = ""; asm { let a = $unpack( a a ); } } } );
	# letv_unp_vp
	call assert_throws( "Invalid operator", ${ () { var a = ""; asm { let a = $xxx( a a++ ); } } } );
}

program asmtest {
	call assert_throws( "Empty asm statement", ${ () { asm {} } } );
	call assert_throws( "Unrecognized opcode 'x'", ${ () { asm { x; } } } );
	call testlet();
	call testletv_i();
	call testletv_v();
	call testletv_a();
	call testletv_opr();
	call testleta();
	call testhalt();
	call testjump();
	call testchr();
	call testunpack();

	var time = $time, idx, count;
	asm {
		let count = 1000;
		loop_0:
			let idx = +( idx 1 );
			jump <( idx count ) loop_0;
	}
	call assert_equals( count, idx, ${-} );
	
	print "Tests passed.";
}
