
rem {
	Generic run-length coder.
}

# Return the encoded length and encode to output if not null.
function rle_encode( input, output ) {
	var in_idx, in_end, out_idx, code, prev, run, lit, max;
	let in_end = -( $len( input ) 1 );
	while <e( in_idx in_end ) {
		let code = $chr( input in_idx );
		if &&( =( code prev ) <( in_idx in_end ) ) {
			inc run;
		} else {
			let prev = code;
			if ||( run >e( in_idx in_end ) ) {
				if output {
					while lit {
						let max = lit;
						if >( max 127 ) {
							let max = 127;
						}
						set [ output out_idx ] = max;
						inc out_idx;
						let lit = -( lit max );
						while max {
							set [ output out_idx ] = $chr( input -( -( -( in_idx lit ) max ) run ) );
							inc out_idx;
							dec max;
						}
					}
					while run {
						let max = run;
						if >( max 127 ) {
							let max = 127;
						}
						set [ output out_idx ] = -( 0 max );
						inc out_idx;
						let run = -( run max );
					}
				} else {
					let out_idx = +( out_idx lit );
					while >( lit 0 ) {
						inc out_idx;
						let lit = -( lit 127 );
					}
					let lit = 0;
					while >( run 0 ) {
						inc out_idx;
						let run = -( run 127 );
					}
					let run = 0;
				}
			}
			inc lit;
		}
		inc in_idx;
	}
	if output {
		set [ output out_idx ] = 1;
		set [ output +( out_idx 1 ) ] = code;
	}
	return +( out_idx 2 );
}

# Return the decoded length and decode to output if not null.
function rle_decode( input, output ) {
	var in_idx, out_idx, prev, code;
	while <( in_idx $len( input ) ) {
		let code = $chr( input in_idx );
		inc in_idx;
		if output {
			while <( code 0 ) {
				set [ output out_idx ] = prev;
				inc out_idx;
				inc code;
			}
			while >( code 0 ) {
				let prev = $chr( input in_idx );
				inc in_idx;
				set [ output out_idx ] = prev;
				inc out_idx;
				let code = -( code 1 );
			}
		} else {
			if <( code 0 ) {
				let out_idx = -( out_idx code );
			} else {
				let in_idx = +( in_idx code );
				let out_idx = +( out_idx code );
			}
		}
	}
	return out_idx;
}

program rle {
	var org, buf, enc, out;
	if =( $argc 3 ) {
		let org = $load( $argv( 1 ) );
		print $cat( "Original length: " $len( org ) );
		
		let buf = $array( rle_encode( org 0 ) );
		print $cat( "Compressed length: " rle_encode( org buf ) );
		let enc = $sub( buf 0 $len( buf ) );
		
		let buf = $array( rle_decode( enc 0 ) );
		print $cat( "Decompressed length: " rle_decode( enc buf ) );
		let out = $sub( buf 0 $len( buf ) );

		if $cmp( org out ) {
			throw "Decoded data differs from original!";
		}
		save enc $argv( 2 );
	} else {
		error "Run-length compression.";
		error "Usage rle.tt input output.rle";
	}
}
