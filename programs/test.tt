
rem { Test }

const ONE = $len( $array( 1 ) );
const TWO = +( ONE 1 );
const STR = "*";
const CAT = $str( "*" "*" );
const ELE = ${ ( * ) };

struct struc {
	a,b,c,d,e;
};

struct exten( struc ) {
	f,g;
};

global g, g1 = 1, g2 = +( g1 1 );
global [ a 3 ], a1 = $array( 1 ), [ a2 g2 ] [ a3 ${ 1, 2, 3 } ], ( exten ) ext = $new( exten );

include "hello.tt";

function assert( value, elem ) {
	if !( value ) {
		throw $str( "Assertion failed on line " $line( elem ) );
	}
}

function assert_equals( expected, value, elem ) {
	if $cmp( expected value ) {
		throw $str( "Assertion failed on line " $line( elem )
			". Expected '" expected "', actual '" value "'." );
	}
}

function assert_throws( expected, elem ) {
	var err;
	try {
		call :( $function( elem ) );
	} catch err {
		if <e( $len( expected ) $len( err ) ) {
			let err = $sub( err 0 $len( expected ) );
		}
	}
	call assert_equals( expected, err, elem );
}

function except( elem ) {
	throw $tup( elem, $line( elem ) );
}

function setg( x ) {
	let g = x;
	return g;
}

function testvoid() {
}

function fact( x ) {
	return ?( <e( x 1 ) 1 *( x fact( -( x 1 ) ) ) );
}

function testprint() {
	call assert_throws( "1", ${ () { print except( ${ 1 } ); } } );
	call assert_throws( "1", ${ () { write except( ${ 1 } ); } } );
	call assert_throws( "1", ${ () { error except( ${ 1 } ); } } );
}

function testvars( x ) {
	var y = x, z = +( y 1 );
	call assert_equals( x, y, ${-} );
	call assert_equals( +( x 1 ), z, ${-} );
	call assert_equals( z, z++, ${-} );
	call assert_equals( +( x 2 ), z, ${-} );
	call assert_equals( z, z--, ${-} );
	call assert_equals( +( x 1 ), z, ${-} );
	call assert_equals( 0, g, ${-} );
	call assert_equals( 1, g1, ${-} );
	call assert_equals( 2, g2, ${-} );
	call setg( y );
	call assert_equals( x, g, ${-} );
	call assert_equals( 1, TRUE, ${-} );
	call assert_equals( 0, FALSE, ${-} );
	call assert_throws( "Name 'a' already defined", ${ () { var a; } } );
	call assert_throws( "Undeclared variable 'xxx'", ${ () { let xxx = 0; } } );
	call assert_throws( "Expected '=' after 'let'", ${ () { let xxx; } } );
	call assert_throws( "Invalid local variable expression", ${ (x) { call x+; } } );
	call assert_throws( "Not an integer", ${ () { var x = "x"; call x++; } } );
	call assert_throws( "Not an integer", ${ () { var x = "x"; call x--; } } );
	return g;
}

function testarray() {
	var b, c, err, idx, [ arr *( TWO TWO ) ];
	call setg( 0 );	
	call assert_equals( 0, g, ${-} );
	call assert_equals( 3, $len( a ), ${-} );
	call assert_equals( 1, $len( a1 ), ${-} );
	call assert_equals( 2, $len( a2 ), ${-} );
	call assert_equals( 3, $len( a3 ), ${-} );
	call assert_equals( 4, $len( arr ), ${-} );
	set [ a, idx ] = "a";
	call assert_equals( "a", [ a 0 ], ${-} );
	set [ a 1 ] = 1;
	set [ a 2 ] = [ a idx ];
	set [ a 2 ] = [ a idx++ ];
	call assert_equals( 1, idx, ${-} );
	set [ a idx++ ] = 2;
	call assert_equals( 2, [ a 1 ], ${-} );
	call assert_equals( 2, idx, ${-} );
	let a = $array( ${ 0, $str( "\"one", "\"" ), $tup( "\\two\\"2 ), "\063", ${ four(4) }, 84, 84 } );
	let a = $array( $parse( $unparse( $values( a ) ) ) );
	call assert_equals( 7, $len( a ), ${-} );
	call assert_equals( 0, [ a 0 ], ${-} );
	call assert_equals( "\"one\"", [ a 1 ], ${-} );
	call assert_equals( "\\two\\", $str( [ a 2 ] ), ${-} );
	call assert_equals( 2, $tup( 0, [ a 2 ] ), ${-} );
	call assert_equals( "3", [ a 3 ], ${-} );
	call assert_equals( "four", [ a 4 ], ${-} );
	call assert_equals( "4", $child( $next( [ a 4 ] ) ), ${-} );
	call assert_equals( "TT", $sub( a, 5, 2 ), ${-} );
	call assert_equals( "[Array]", a, ${-} );
	call assert_equals( 1, $len( $array( 1 ) ), ${-} );
	let b = $array( 2 );
	let c = $array( ${ "a" 1 } );
	call assert_equals( "a", [ c 0 ], ${-} );
	call assert_equals( 1, [ c 1 ], ${-} );
	set [ b 0 ] = b;
	set [ b 1 ] = c;
	set [ c 0 ] = c;
	set [ c 1 ] = b;
	call assert_throws( "Invalid array length.", ${ () { call $array( -1 ); } });
	call assert_throws( "Array index", ${ () { set [ $array( 0 ) -1 ] = except( ${ 0 } ); } } );
	call assert_throws( "Array index", ${ () { set [ $array( 0 ) 0 ] = except( ${ 0 } ); } } );
	call assert_throws( "Array index", ${ () { call [ $array( 0 ) -1 ]; } } );
	call assert_throws( "Array index", ${ () { call [ $array( 0 ) 0 ]; } } );
	call assert_throws( "Not an array", ${ () { call [ 0 0 ]; } } );
	call assert_throws( "Not an array", ${ () { set [ 0 0 ] = 0; } } );
	call assert_throws( "Invalid index expression", ${ () { call []; } } );
	call assert_throws( "Invalid index expression", ${ () { set [] = 0; } } );
	call assert_throws( "Expected '{' after '$'", ${ () { call $array( ${ $ } ); } } );
	call assert_throws( "Expected '(' after '$str'", ${ () { call $array( ${ $str } ); } } );
	call assert_throws( "Invalid string literal", ${ () { call $array( ${ $str() } ); } } );
	call assert_throws( "Invalid string literal", ${ () { call $array( ${ $str( "" a ) } ); } } );
	call assert_throws( "Expected '(' after '$tup'", ${ () { call $array( ${ $tup } ); } } );
	call assert_throws( "Invalid tuple string", ${ () { call $array( ${ $tup() } ); } } );
	call assert_throws( "Invalid tuple constant", ${ () { call $array( ${ $tup( "", ) } ); } } );
	call assert_throws( "Invalid tuple integer", ${ () { call $array( ${ $tup( "", a ) } ); } } );
	call assert_throws( "Invalid integer constant", ${ () { call $array( ${ a } ); } } );
	call assert_throws( "Local variable 'x' already", ${ ( x ) { var [ x 0 ]; } } );
	call assert_throws( "Local variable 'x' already", ${ ( x ) { var x = $array( 0 ); } } );
}

function testbuffer() {
	var b = $buffer( ${ $tup( "a", 1 ) } );
	call assert_equals( 1, $len( b ), ${-} );
	call assert_equals( 1, [ b 0 ], ${-} );
	let b = $buffer( struc );
	let struc.a( b ) = $tup( "a", 2 );
	call assert_equals( 2, struc.a( b ), ${-} );
	call assert_throws( "Invalid array length.", ${ () { call $buffer( -1 ); } });
}

function testswitch() {
	var x;
	switch $tup( "a" 1 ) {
		case 1   { call assert( FALSE, ${-} ); }
		case "a" { call assert( FALSE, ${-} ); }
		case $tup( "a" 1 ) { let x = 1; }
		default { call assert( FALSE, ${-} ); }
	}
	call assert_equals( 1, x, ${-} );
	switch "a" {
		case "a" { let x = 2; }
		default { call assert( FALSE, ${-} ); }
	}
	call assert_equals( 2, x, ${-} );
	switch 1 {
		case 1 { let x = 3; }
		default { call assert( FALSE, ${-} ); }
	}
	call assert_equals( 3, x, ${-} );
	switch 1 {
		default { let x = 4; }
	}
	call assert_equals( 4, x, ${-} );
	switch 3 {
		case 0, setg( 0 ) setg( 4 ) { let x = 5; }
	}
	call assert_equals( 4, x, ${-} );
	call assert_equals( 4, g, ${-} );
	call assert_throws( "1", ${ () { switch except( ${ 1 } ) {} } } );
	call assert_throws( "1", ${ () { switch 0 { case except( ${ 1 } ) { call except( ${ 2 } ); } } } } );
	call assert_throws( "1", ${ () { switch 0 { case 0 { call except( ${ 1 } ); } } } } );
	call assert_throws( "Duplicate", ${ () { switch 0 { default {} default {} } } } );
}

function testif() {
	var x;
	if FALSE { call assert( FALSE, ${-} ); }
	if TRUE { let x = 1; } else { call assert( FALSE, ${-} ); }
	call assert_equals( 1, x, ${-} );
	if "" { let x = 2; }
	call assert_equals( 2, x, ${-} );
	call assert_throws( "1", ${ () { if except( ${ 1 } ) { call except( ${ 2 } ); } } } );
	call assert_throws( "Expected '{'", ${ () { if 0 {} else } } );
}

function testwhile() {
	var n;
	while <( n 1 ) { inc n; }
	call assert_equals( 1, n, ${-} );
	while <( n 10 ) {
		break;
		call assert( FALSE, ${-} );
	}
	while <( n 10 ) {
		if =( n 5 ) { break; }
		inc n;
		continue;
		call assert( FALSE, ${-} );
	}
	call assert_equals( 5, n, ${-} );
	while "" {
		try { break; } catch n { call assert( FALSE, ${-} ); }
		call assert( FALSE, ${-} );
	}
	while TRUE {
		try { throw 0; } catch n { break; }
		call assert( FALSE, ${-} );
	}
	call assert_equals( 1, :( $function( ${ () { while TRUE { return 1; } return 0; } } ) ), ${-} );
	var off, end = 10;
	while <( off end ) {
		var aaa, bbb = 0;
		inc aaa;
		inc bbb;
		inc off;
	}
	call assert_equals( 10, off, ${-} );
	call assert_equals( 10, aaa, ${-} );
	call assert_equals( 1, bbb, ${-} );
	call assert_throws( "1", ${ () { while except( ${ 1 } ) { call assert( FALSE, ${-} ); } } } );
	call assert_throws( "1", ${ () { while TRUE { call except( ${ 1 } ); } } } );
	call assert_throws( "Unhandled 'break'", ${ () { break; } } );
}

function testtry() {
	var e;
	try {} catch e { call assert( FALSE, ${-} ); }
	try {
		try {
			call 0;
			throw 1;
		} catch e {
			call assert_equals( 1, e, ${-} );
			throw 2;
		}
	} catch e {
	}
	call assert_equals( 2, e, ${-} );
	call assert_throws( "Undeclared local variable 'a'", ${ () { try {} catch a {} } } );
	call assert_throws( "Expected 'catch'", ${ () { try {} } } );
	try { try { return 0; } catch e {} } catch e {}
	call assert( FALSE, ${-} );
}

function testoper() {
	call assert_throws( "Unhandled expression", ${ () { call $$(); } } );
	call assert_throws( "Expected '(' after '$str'", ${ () { call $str; } } );
	call assert_throws( "Expected '(' after function", ${ () { call hello; } } );
	call assert_throws( "Wrong number of arguments", ${ () { call $str(); } } );
	call assert_throws( "Wrong number of arguments", ${ () { call hello( 1 ); } } );
	call assert_throws( "Unexpected '(' after expression", ${ () { call 1(); } } );
	call assert_throws( "Expected expression after ','", ${ () { call hello( 1, ); } } );
	call assert_throws( "Expected expression after 'print'", ${ () { print; } } );
}

function testinfix() {
	call assert_equals( 3, '( ONE + ONE ONE ), ${-} );
	call assert_throws( "Expected expression", ${ () { call '(); } } );
	call assert_throws( "Expected operator", ${ () { call '( 1 ); } } );
	call assert_throws( "Unhandled operator", ${ () { call '( 1 0 ); } } );
	call assert_throws( "Wrong number of arguments", ${ () { call '( 1 $argc ); } } );
	call assert_throws( "Wrong number of arguments", ${ () { call '( 1 + ); } } );
}

function testarith() {
	var zero, one = 1, two = 2;
	call assert_equals( 4, +( +( 1 1 ) +( 1 1 ) ), ${-} );
	call assert_equals( 5, +( 1 1 2 1 ), ${-} );
	call assert_equals( 3, +( ONE TWO ), ${-} );
	call assert_equals( 3, +( ONE two ), ${-} );
	call assert_equals( 0, -( 1 ONE ), ${-} );
	call assert_equals( 0, -( 1 1 ), ${-} );
	call assert_equals( 0, -( 1 one ), ${-} );
	call assert_equals( 4, *( 2 TWO ), ${-} );
	call assert_equals( 4, *( 2 2 ), ${-} );
	call assert_equals( 4, *( 2 two ), ${-} );
	call assert_equals( 3, /( 6 TWO ), ${-} );
	call assert_equals( 3, /( 6 2 ), ${-} );
	call assert_equals( 3, /( 6 two ), ${-} );
	call assert_equals( 2, %( 6 *( TWO TWO ) ), ${-} );
	call assert_equals( 1, %( 1 2 ), ${-} );
	call assert_equals( 1, %( 1 two ), ${-} );
	call assert_equals( 8, <<( 4 ONE ), ${-} );
	call assert_equals( 8, <<( 4 1 ), ${-} );
	call assert_equals( 8, <<( 4 one ), ${-} );
	call assert_equals( -4, >>( -8 ONE ), ${-} );
	call assert_equals( -4, >>( -8 1 ), ${-} );
	call assert_equals( -4, >>( -8 one ), ${-} );
	call assert_equals( 1, =( 1 ONE ), ${-} );
	call assert_equals( 1, =( 1 1 ), ${-} );
	call assert_equals( 1, =( 1 one ), ${-} );
	call assert_equals( 0, =( 1 FALSE ), ${-} );
	call assert_equals( 0, =( 1 0 ), ${-} );
	call assert_equals( 0, =( 1 zero ), ${-} );
	call assert_equals( 0, <>( 1 ONE ), ${-} );
	call assert_equals( 0, <>( 1 1 ), ${-} );
	call assert_equals( 0, <>( 1 one ), ${-} );
	call assert_equals( 1, <>( 1 FALSE ), ${-} );
	call assert_equals( 1, <>( 1 0 ), ${-} );
	call assert_equals( 1, <>( 1 zero ), ${-} );
	call assert_equals( 1, <( 0 ONE ), ${-} );
	call assert_equals( 1, <( 0 1 ), ${-} );
	call assert_equals( 1, <( 0 one ), ${-} );
	call assert_equals( 0, <( 1 ONE ), ${-} );
	call assert_equals( 0, <( 1 1 ), ${-} );
	call assert_equals( 0, <( 1 one ), ${-} );
	call assert_equals( 1, <e( 0 ONE ), ${-} );
	call assert_equals( 1, <e( 0 1 ), ${-} );
	call assert_equals( 1, <e( 0 one ), ${-} );
	call assert_equals( 1, <e( 1 ONE ), ${-} );
	call assert_equals( 1, <e( 1 1 ), ${-} );
	call assert_equals( 1, <e( 1 one ), ${-} );
	call assert_equals( 0, <e( 1 FALSE ), ${-} );
	call assert_equals( 0, <e( 1 0 ), ${-} );
	call assert_equals( 0, <e( 1 zero ), ${-} );
	call assert_equals( 1, >( 1 FALSE ), ${-} );
	call assert_equals( 1, >( 1 0 ), ${-} );
	call assert_equals( 1, >( 1 zero ), ${-} );
	call assert_equals( 0, >( 1 ONE ), ${-} );
	call assert_equals( 0, >( 1 1 ), ${-} );
	call assert_equals( 0, >( 1 one ), ${-} );
	call assert_equals( 1, >e( 1 FALSE ), ${-} );
	call assert_equals( 1, >e( 1 0 ), ${-} );
	call assert_equals( 1, >e( 1 zero ), ${-} );
	call assert_equals( 1, >e( 1 ONE ), ${-} );
	call assert_equals( 1, >e( 1 1 ), ${-} );
	call assert_equals( 1, >e( 1 one ), ${-} );
	call assert_equals( 0, >e( 0 ONE ), ${-} );
	call assert_equals( 0, >e( 0 1 ), ${-} );
	call assert_equals( 0, >e( 0 one ), ${-} );
	call assert_equals( 0, &( 1 TWO ), ${-} );
	call assert_equals( 0, &( 1 2 ), ${-} );
	call assert_equals( 0, &( 1 two ), ${-} );
	call assert_equals( 2, &( 2 TWO ), ${-} );
	call assert_equals( 2, &( 2 2 ), ${-} );
	call assert_equals( 2, &( 2 two ), ${-} );
	call assert_equals( 3, |( 1 TWO ), ${-} );
	call assert_equals( 3, |( 1 2 ), ${-} );
	call assert_equals( 3, |( 1 two ), ${-} );
	call assert_equals( 1, ^( 1 FALSE ), ${-} );
	call assert_equals( 1, ^( 1 0 ), ${-} );
	call assert_equals( 1, ^( 1 zero ), ${-} );
	call assert_equals( 0, ^( 1 ONE ), ${-} );
	call assert_equals( 0, ^( 1 1 ), ${-} );
	call assert_equals( 0, ^( 1 one ), ${-} );
	call assert_equals( -1, ~( FALSE ), ${-} );
	call assert_equals( 21, +( *( +( *( 1 2 ) 3 ) 4 ) 1 ), ${-} );
	call assert_equals( 10, +( *( +( *( 1 two ) two ) two ) two ), ${-} );
	call assert_throws( "1", ${ () { call +( except( ${ 1 } ) except( ${ 0 } ) ); } } );
	call assert_throws( "1", ${ () { call +( except( ${ 1 } ) 0 ); } } );
	call assert_throws( "1", ${ () { call +( 0 except( ${ 1 } ) ); } } );
	call assert_throws( "Integer division by zero", ${ () { call /( 1 FALSE ); } } );
	call assert_throws( "Integer division by zero", ${ () { call /( 1 0 ); } } );
	call assert_throws( "Integer division by zero", ${ () { var zero; call /( 1 zero ); } } );
	call assert_throws( "Modulo division by zero", ${ () { call %( 1 FALSE ); } } );
	call assert_throws( "Modulo division by zero", ${ () { call %( 1 0 ); } } );
	call assert_throws( "Modulo division by zero", ${ () { var zero; call %( 1 zero ); } } );
}

function testlogic() {
	call assert_equals( 1, !( 0 ), ${-} );
	call assert_equals( 0, !( 1 ), ${-} );
	call assert_equals( 0, !( "" ), ${-} );
	call assert_equals( 0, &&( 0 0 ), ${-} );
	call assert_equals( 0, &&( 0 1 ), ${-} );
	call assert_equals( 0, &&( 1 0 ), ${-} );
	call assert_equals( 1, &&( 1 1 ), ${-} );
	call assert_equals( 1, &&( 1 1 1 ), ${-} );
	call assert_equals( 1, &&( 1 "a" ), ${-} );
	call assert_equals( 1, &&( "a" 1 ), ${-} );
	call assert_equals( 1, &&( "a" "a" "a" ), ${-} );
	call assert_equals( 0, &&( 0 except( ${-} ) ), ${-} );
	call assert_equals( 0, ||( 0 0 ), ${-} );
	call assert_equals( 1, ||( 0 1 ), ${-} );
	call assert_equals( 1, ||( 1 0 ), ${-} );
	call assert_equals( 1, ||( 1 1 ), ${-} );
	call assert_equals( 1, ||( 0 0 1 ), ${-} );
	call assert_equals( 1, ||( 0 "a" ), ${-} );
	call assert_equals( 1, ||( "a" 0 ), ${-} );
	call assert_equals( 1, ||( 1 except( ${-} ) ), ${-} );
	call assert_throws( "1", ${ () { call !( except( ${ 1 } ) ); } } );
	call assert_throws( "1", ${ () { call &&( except( ${ 1 } ) 1 ); } } );
	call assert_throws( "1", ${ () { call &&( 1 except( ${ 1 } ) ); } } );
	call assert_throws( "1", ${ () { call ||( except( ${ 1 } ) 0 ); } } );
	call assert_throws( "1", ${ () { call ||( 0 except( ${ 1 } ) ); } } );
}

function testternary() {
	call assert_equals( 1, ?( 0, except( ${-} ), 1 ), ${-} );
	call assert_equals( 1, ?( 1, 1, except( ${-} ) ), ${-} );
	call assert_throws( "1", ${ () { call ?( except( ${ 1 } ), 0, 0 ); } } );
	call assert_throws( "1", ${ () { call ?( 0, 0, except( ${ 1 } ) ); } } );
	call assert_throws( "1", ${ () { call ?( 1, except( ${ 1 } ), 0 ); } } );
}

function testcmp() {
	call assert( =( $cmp( 0 0 ) 0 ), ${-} );
	call assert( >( $cmp( 1 0 ) 0 ), ${-} );
	call assert( <( $cmp( 0 1 ) 0 ), ${-} );
	call assert( >( $cmp( "a" 0 ) 0 ), ${-} );
	call assert( <( $cmp( 0 "a" ) 0 ), ${-} );
	call assert( =( $cmp( "" "" ) 0 ), ${-} );
	call assert( =( $cmp( "0" "0" ) 0 ), ${-} );
	call assert( =( $cmp( STR "*" ) 0 ), ${-} );
	call assert( =( $cmp( CAT "**" ) 0 ), ${-} );
	call assert( =( $cmp( $tup( "a" 1 ) $tup( "a" 1 ) ) 0 ), ${-} );
	call assert( >( $cmp( 1 0 ) 0 ), ${-} );
	call assert( >( $cmp( "1" "0" ) 0 ), ${-} );
	call assert( <( $cmp( "0" "1" ) 0 ), ${-} );
	call assert( >( $cmp( "aa" "a" ) 0 ), ${-} );
	call assert( <( $cmp( "a" "aa" ) 0 ), ${-} );
	call assert( <( $cmp( "b" "ba" ) 0 ), ${-} );
	call assert( <( $cmp( "ba" "bb" ) 0 ), ${-} );
	call assert( <( $cmp( $tup( "a" 0 ) $tup( "b" 1 ) ) 0 ), ${-} );
	call assert( <( $cmp( $tup( "a" 1 ) $tup( "b" 1 ) ) 0 ), ${-} );
	call assert_throws( "1", ${ () { call $cmp( except( ${ 1 } ) "" ); } } );
	call assert_throws( "1", ${ () { call $cmp( "" except( ${ 1 } ) ); } } );
}

function testcat() {
	call assert_equals( "0", $cat( 0 ), ${-} );
	call assert_equals( "01", $cat( 0 1 ), ${-} );
	call assert_equals( "0", $cat( "" 0 ), ${-} );
	call assert_equals( "0", $cat( 0 "" ), ${-} );
	call assert_equals( "012", $cat( 0 "1" "2" ), ${-} );
	call assert_equals( a, $cat( a ), ${-} );
	call assert_throws( "1", ${ () { call $cat( except( ${ 1 } ) "" ); } } );
	call assert_throws( "1", ${ () { call $cat( "" except( ${ 1 } ) ); } } );
}

function testchr() {
	var idx, chr = "\377";
	call assert_equals( 126, $chr( "~" 0 ), ${-} );
	call assert_equals( -1, $chr( chr idx ), ${-} );
	call assert_equals( 0, idx, ${-} );
	call assert_equals( -1, $chr( chr idx++ ), ${-} );
	call assert_equals( 1, idx, ${-} );
	call assert_throws( "1", ${ () { call $chr( except( ${ 1 } ) 0 ); } } );
	call assert_throws( "1", ${ () { call $chr( "" except( ${ 1 } ) ); } } );
	call assert_throws( "Not a string", ${ () { call $chr( 0 0 ); } } );
	call assert_throws( "String index", ${ () { call $chr( "" -1 ); } } );
	call assert_throws( "String index", ${ () { call $chr( "" 0 ); } } );
}

function testsub() {
	call assert_equals( "b", $sub( "abc" 1 1 ), ${-} );
	call assert_equals( "ABC", $sub( $array( ${ 65, 66, 67 } ) 0 3 ), ${-} );
	call assert_throws( "1", ${ () { call $sub( except( ${ 1 } ) 0 0 ); } } );
	call assert_throws( "1", ${ () { call $sub( "" except( ${ 1 } ) 0 ); } } );
	call assert_throws( "1", ${ () { call $sub( "" 0 except( ${ 1 } ) ); } } );
	call assert_throws( "Not a string", ${ () { call $sub( 0 0 0 ); } } );
	call assert_throws( "Range out of bounds", ${ () { call $sub( $array( 1 ) 1 1 ); } } );
	call assert_throws( "Range out of bounds", ${ () { call $sub( "a" 1 1 ); } } );
	call assert_throws( "Range out of bounds", ${ () { call $sub( "a" -1 1 ); } } );
	call assert_throws( "Range out of bounds", ${ () { call $sub( "a" 0 -1 ); } } );
}

function testasc() {
	call assert_equals( "~", $asc( 126 ), ${-} );
	call assert_throws( "1", ${ () { call $asc( except( ${ 1 } ) ); } } );
}

function testhex() {
	call assert_equals( "0x00000000", $hex( 0x00000000 ), ${-} );
	call assert_equals( "0xFFFFFF00", $hex( -256 ), ${-} );
	call assert_throws( "1", ${ () { call $hex( except( ${ 1 } ) ); } } );
}

function testint() {
	call assert_equals( 1, $int( "1" ), ${-} );
	call assert_equals( 10, $int( "0xA" ), ${-} );
	call assert_equals( 8, $int( "010" ), ${-} );
	call assert_equals( -256, $int( "0xFFFFFF00" ), ${-} );
	call assert_equals( 256, $int( "-0xFFFFFF00" ), ${-} );
	call assert_throws( "1", ${ () { call $int( except( ${ 1 } ) ); } } );
	call assert_throws( "Not a string", ${ () { call $int( 1 ); } } );
	call assert_throws( "Unable to convert", ${ () { call $int( "a" ); } } );
}

function testlen() {
	call assert_equals( 0, $len( "" ), ${-} );
	call assert_equals( 1, $len( "a" ), ${-} );
	call assert_equals( 1, $len( $array( 1 ) ), ${-} );
	call assert_throws( "1", ${ () { call $len( except( ${ 1 } ) ); } } );
	call assert_throws( "Not a string or array", ${ () { call $len( 0 ); } } );
}

function testtup() {
	call assert_equals( 1,  +( $tup( "a", 1 ) 0 ), ${-} );
	call assert_equals( 1,  $tup( 0, $tup( "a", 1 ) ), ${-} );
	call assert_equals( "a", $tup( $tup( "a", 1 ), $tup( "b" 0 ) ), ${-} );
	call assert_throws( "1", ${ () { call $tup( except( ${ 1 } ) 0 ); } } );
	call assert_throws( "1", ${ () { call $tup( "", except( ${ 1 } ) ); } } );
}

function testread() {
	call assert_equals( "", $read( 0 ), ${-} );
	call assert_throws( "1", ${ () { call $read( except( ${ 1 } ) ); } } );
	call assert_throws( "Invalid length", ${ () { call $read( -1 ); } } );
}

function testload() {
	var src = $load( $src );
	call assert_equals( $sub( src, 100, -( $len( src ) 100 ) ), $load( $src, 100 ), ${-} );
	call assert_equals( $sub( src, 100, 100 ), $load( $src, 100, 100 ), ${-} );
	call assert_equals( "", $load( $src, 0, 0 ), ${-} );
	call assert_equals( "", $load( $src, -1, 0 ), ${-} );
	call assert_equals( "", $load( $src, $len( src ), 1 ), ${-} );
	call assert_equals( src, $load( $src, 0, +( $len( src ) 1 ) ), ${-} );
	call assert_throws( "1", ${ () { call $load( except( ${ 1 } ) ); } } );
	call assert_throws( "2", ${ () { call $load( "", except( ${ 2 } ) ); } } );
	call assert_throws( "3", ${ () { call $load( "", 0, except( ${ 3 } ) ); } } );
	call assert_throws( "Too many", ${ () { call $load( "", 0, 0, 0 ); } } );
	call assert_throws( "Not a string", ${ () { call $load( 0 ); } } );
}

function testsave() {
	call assert_throws( "1", ${ () { save except( ${ 1 } ), 0; } } );
	call assert_throws( "1", ${ () { save "", except( ${ 1 } ); } } );
	call assert_throws( "Not a string", ${ () { save 0 0; } } );
	call assert_throws( "Not a string", ${ () { append "", 0; } } );
}

function testflen() {
	call assert_equals( $flen( $src ), $len( $load( $src ) ), ${-} );
	call assert_throws( "1", ${ () { call $flen( except( ${ 1 } ) ); } } );
	call assert_throws( "Not a string", ${ () { call $flen( 0 ); } } );
}

function testargc() {
	call assert( >( $argc 0 ), ${-} );
}

function testargv() {
	call assert_equals( $src, $argv( 0 ), ${-} );
	call assert_throws( "1", ${ () { call $argv( except( ${ 1 } ) ); } } );
	call assert_throws( "Command-line argument index", ${ () { call $argv( -1 ); } } );
}

function testtime() {
	call assert_equals( 24, $len( $time ), ${-} );
}

function testparse() {
	var elem = $parse( "#test\12 rem { Test }" );
	call assert_equals( "rem", elem, ${-} );
	call assert_equals( "Test", $child( $next( elem ) ), ${-} );
	call assert_throws( "1", ${ () { call $parse( except( ${ 1 } ) ); } } );
	call assert_throws( "Not a string", ${ () { call $parse( 0 ); } } );
	call assert_throws( "Unclosed string", ${ () { call $parse( "\""); } } );
	call assert_throws( "Unexpected closing bracket", ${ () { call $parse( "())"); } } );
	call assert_throws( "Unclosed element", ${ () { call $parse( "(}" ); } } );
}

function testunparse() {
	var elem = $parse( $unparse( ${ rem { Test } } ) );
	call assert_equals( "rem", elem, ${-} );
	call assert_equals( "Test", $child( $next( elem ) ), ${-} );
	call assert_throws( "1", ${ () { call $unparse( except( ${ 1 } ) ); } } );
	call assert_throws( "Not an element", ${ () { call $unparse( 0 ); } } );
}

function testchild() {
	call assert_equals( "a", $child( ${ ( a ) } ), ${-} );
	call assert_equals( "*", $child( ELE ), ${-} );
	call assert_throws( "1", ${ () { call $child( except( ${ 1 } ) ); } } );
	call assert_throws( "Not an element", ${ () { call $child( 0 ); } } );
}

function testnext() {
	call assert_equals( "a", $next( ${ 0 a } ), ${-} );
	call assert_throws( "1", ${ () { call $next( except( ${ 1 } ) ); } } );
	call assert_throws( "Not an element", ${ () { call $next( 0 ); } } );
}

function testline() {
	var x = $line( ${-} );
	var y = $line( ${-} );
	call assert_equals( 1, -( y x ), ${-} );
	call assert_throws( "1", ${ () { call $line( except( ${ 1 } ) ); } } );
	call assert_throws( "Not an element", ${ () { call $line( 0 ); } } );
}

function testquote() {
	call assert_equals( "\"\\\"\\\\\\177\"", $quote( $str( "\"\\" $asc( 127 ) ) ), ${-} );
	call assert_throws( "1", ${ () { call $quote( except( ${ 1 } ) ); } } );
	call assert_throws( "Not a string", ${ () { call $quote( 0 ); } } );
}

function testunquote() {
	call assert_equals( "\\~", $unquote( "\"\\\\\\176\"" ), ${-} );
	call assert_throws( "1", ${ () { call $unquote( except( ${ 1 } ) ); } } );
	call assert_throws( "Not a string", ${ () { call $unquote( 0 ); } } );
}

function testpack() {
	call assert_equals( "\0\0\0\0", $pack( 0 ), ${-} );
	call assert_equals( "\0\0\0\1", $pack( 1 ), ${-} );
	call assert_equals( "\1\2\3\4", $pack( 0x01020304 ), ${-} );
	call assert_equals( "\0\0\0\0\1\2\3\4", $pack( $array( ${ 0, 0x1020304 } ) ), ${-} );
	call assert_throws( "1", ${ () { call $pack( except( ${ 1 } ) ); } } );
}

function testunpack() {
	var x;
	call assert_equals( 1, $unpack( "\0\0\0\1" x ), ${-} );
	call assert_equals( 0x1020304, $unpack( "\1\2\3\4" 0 ), ${-} );
	call assert_equals( -1, $unpack( $pack( -1 ) 0 ), ${-} );
	call assert_equals( 2, $unpack( $pack( $array( ${ 1 2 } ) ) 1 ), ${-} );
	call assert_throws( "1", ${ () { call $unpack( except( ${ 1 } ) 0 ); } } );
	call assert_throws( "1", ${ () { call $unpack( "" except( ${ 1 } ) ); } } );
	call assert_throws( "Not a string", ${ () { call $unpack( 0 0 ); } } );
	call assert_throws( "String index", ${ () { call $unpack( "\0\0\0\0" -1 ); } } );
	call assert_throws( "String index", ${ () { call $unpack( "\0\0\0" 0 ); } } );
}

function teststruct() {
	var ( exten ) obj = $new( exten );
	let exten.f( obj ) = "a";
	let exten.f( obj ) = 1;
	let obj.g = 2;
	call assert_equals( 5, $len( struc ), ${-} );
	call assert_equals( 7, $len( exten ), ${-} );
	call assert_equals( 0, struc.a, ${-} );
	call assert_equals( 4, struc.e, ${-} );
	call assert_equals( 6, exten.g, ${-} );
	call assert_equals( 7, $len( $new( exten ) ), ${-} );
	call assert_equals( 1, exten.f( obj ), ${-} );
	call assert_equals( 2, obj.g, ${-} );
	call assert_throws( "Field 'struc.xxx' not declared", ${ () { call struc.xxx; } } );
	call assert_throws( "Wrong number", ${ () { call struc.a( 0 0 ); } } );
	call assert_throws( "Not an array", ${ () { call struc.a( 0 ); } } );
	call assert_throws( "Array index", ${ () { call exten.g( $new( struc ) ); } } );
	call assert_throws( "Undeclared", ${ () { set struc( 0 ) = 0; } } );
	call assert_throws( "Field 'struc.xxx' not declared", ${ () { set struc.xxx( 0 ) = 0; } } );
	call assert_throws( "Invalid", ${ () { set struc.a() = 0; } } );
	call assert_throws( "Not an array", ${ () { set struc.a( 0 ) = 0; } } );
	call assert_throws( "Array index", ${ () { set exten.g( $new( struc ) ) = 0; } } );
	call assert_throws( "Structure 'xxx' not", ${ () { var ( xxx ) a; } } );
	call assert_throws( "Expression 'p.xxx' has no", ${ ( p ) { call p.xxx; } } );
	call assert_throws( "Field not declared", ${ ( ( exten ) p ) { call p.xxx; } } );
	call assert_throws( "Expression 'a.xxx' has no", ${ () { call a.xxx; } } );
	call assert_throws( "Field not declared", ${ () { call ext.xxx; } } );
	call assert_throws( "Variable 'p' has no", ${ ( p ) { let p.xxx = 1; } } );
	call assert_throws( "Field 'xxx' not declared", ${ ( ( exten ) p ) { let p.xxx = 1; } } );
	call assert_throws( "Variable 'a' has no", ${ () { let a.xxx = 1; } } );
	call assert_throws( "Field 'xxx' not declared", ${ () { let ext.xxx = 1; } } );
}

function testfuncref() {
	call assert_equals( "testfuncref", @testfuncref, ${-} );
	call setg( 0 );
	call :( @setg 1 );
	call assert_equals( 1, g, ${-} );
	call assert_throws( "Expected '(' after ':'", ${ () { call :; } } );
	call assert_throws( "Expected expression after '('", ${ () { call :(); } } );
	call assert_throws( "Not a function reference.", ${ () { call :( $tup( "a" 1 ) ); } } );
	call assert_throws( "Incorrect number of parameters", ${ () { call :( @setg 1 2 ); } } );
	call assert_throws( "Function 'xxx' not defined", ${ () { call @xxx; } } );
}

function testsame() {
	call assert_equals( 1, $same( 0 0 ), ${-} );
	call assert_equals( 1, $same( STR STR ), ${-} );
	call assert_equals( 1, $same( @testsame @testsame ), ${-} );
	call assert_equals( 0, $same( STR "*" ), ${-} );
	call assert_equals( 0, $same( STR $tup( STR 1 ) ), ${-} );
	call assert_throws( "1", ${ () { call setg( 0 ); call $same( except( ${ 1 } ) setg( 2 ) ); } } );
	call assert_equals( 0, g, ${-} );
	call assert_throws( "2", ${ () { call $same( 0, except( ${ 2 } ) ); } } );
}

function testeq() {
	call assert_equals( 1, $eq( 0 0 ), ${-} );
	call assert_equals( 1, $eq( "" "" ), ${-} );
	call assert_equals( 1, $eq( "a" "a" ), ${-} );
	call assert_equals( 1, $eq( STR STR ), ${-} );
	call assert_equals( 1, $eq( @testeq @testeq ), ${-} );
	call assert_equals( 0, $eq( 0 1 ), ${-} );
	call assert_equals( 0, $eq( 0 "a" ), ${-} );
	call assert_equals( 0, $eq( "a" 0 ), ${-} );
	call assert_equals( 0, $eq( "a" "aa" ), ${-} );
	call assert_throws( "1", ${ () { call setg( 0 ); call $eq( except( ${ 1 } ) setg( 2 ) ); } } );
	call assert_equals( 0, g, ${-} );
	call assert_throws( "2", ${ () { call $eq( 0, except( ${ 2 } ) ); } } );
}

function testsrc() {
	call assert_equals( "test.tt", $sub( $src, -( $len( $src ) 7 ), 7 ), ${-} );
}

function teststridx() {
	call assert_equals( -1, $stridx( "file", "", 0 ), ${-} );
	call assert_equals( -1, $stridx( "file", "/", 0 ), ${-} );
	call assert_equals( 1, $stridx( "c:\\file", "/:\\", 0 ), ${-} );
	call assert_equals( 2, $stridx( "c:\\file\\", "/:\\", 2 ), ${-} );
	call assert_equals( 7, $stridx( "c:\\file\\", "/:\\", 3 ), ${-} );
	call assert_equals( 2, $endidx( "c:\\file", "/:\\" ), ${-} );
	call assert_throws( "1", ${ () { call setg( "0" ); call $stridx( except( ${ 1 } ), setg( "2" ), 0 ); } } );
	call assert_equals( "0", g, ${-} );
	call assert_throws( "2", ${ () { call $stridx( setg( "1" ), except( ${ 2 } ), 0 ); } } );
	call assert_equals( "1", g, ${-} );
	call assert_throws( "3", ${ () { call $stridx( setg( "1" ), setg( "2" ), except( ${ 3 } ) ); } } );
	call assert_equals( "2", g, ${-} );
	call assert_throws( "Not a string.", ${ () { call $stridx( 0, "", 0 ); } } );
	call assert_throws( "Not a string.", ${ () { call $stridx( "", 0, 0 ); } } );
	call assert_throws( "String index", ${ () { call $stridx( "", "", 0 ); } } );
	call assert_throws( "String index", ${ () { call $stridx( "a", "a", 1 ); } } );
}

function testinterrupted() {
	var x;
	let x = STR;
	let x = $interrupted;
	call assert( !( x ), ${-} );
}

function testinc() {
	var int;
	inc int;
	call assert_equals( 1, int, ${-} );
	call assert_throws( "Not an integer.", ${ () { var int = ""; inc int; } } );
	call assert_throws( "Undeclared local variable", ${ () { inc a; } } );
	call assert_throws( "Expected name after 'inc'", ${ () { inc; } } );
}

function testdec() {
	var int;
	dec int;
	call assert_equals( -1, int, ${-} );
	call assert_throws( "Not an integer.", ${ () { var int = ""; dec int; } } );
	call assert_throws( "Undeclared local variable", ${ () { dec a; } } );
}

function testelem() {
	call assert_equals( "1", $elem( ${ 1 }, 0, 0 ), ${-} );
	call assert_equals( "2", $child( $elem( ${()}, ${ 2 }, 0 ) ), ${-} );
	call assert_equals( "2", $child( $elem( ${[]}, ${ 2 }, 0 ) ), ${-} );
	call assert_equals( "2", $child( $elem( ${{}}, ${ 2 }, 0 ) ), ${-} );
	call assert_equals( "2", $child( $elem( ${{}}, $elem( ${ 2 }, 0, 0 ), 0 ) ), ${-} );
	call assert_equals( "3", $next( $elem( ${ 1 }, 0, ${ 3 } ) ), ${-} );
	call assert_equals( "3", $next( $elem( ${ 1 }, 0, $elem( ${ 3 }, 0, 0 ) ) ), ${-} );
	call assert_equals( "()", $elem( $parse( "(abc) def" ), 0, 0 ), ${-} );
	call assert_equals( 0, $child( $elem( $parse( "(abc) def" ), 0, 0 ) ), ${-} );
	call assert_equals( "2", $child( $elem( $parse( "(abc) def" ), ${ 2 }, 0 ) ), ${-} );
	call assert_equals( 0, $next( $elem( $parse( "(abc) def" ), 0, 0 ) ), ${-} );
	call assert_equals( "3", $next( $elem( $parse( "(abc) def" ), ${ 2 }, ${ 3 } ) ), ${-} );
	call assert_equals( "3", $next( $elem( $elem( ${()}, ${ abc }, ${ def } ), ${ 2 }, ${ 3 } ) ), ${-} );
	call assert_throws( "1", ${ () { call $elem( except( ${ 1 } ), 0, 0 ); } } );
	call assert_throws( "Not an element.", ${ () { call $elem( 1, 0, 0 ); } } );
	call assert_throws( "2", ${ () { call $elem( ${-}, except( ${ 2 } ), 0 ); } } );
	call assert_throws( "Not an element.", ${ () { call $elem( ${-}, 2, 0 ); } } );
	call assert_throws( "3", ${ () { call $elem( ${-}, 0, except( ${ 3 } ) ); } } );
	call assert_throws( "Not an element.", ${ () { call $elem( ${-}, 0, 3 ); } } );
	call assert_throws( "Parent elements must", ${ () { call $elem( ${-}, ${ 2 }, 0 ); } } );
	call assert_throws( "Expected '{' after '$'", ${ () { call $; } } );
}

function testvalues() {
	var arr = $array( $parse( $unparse( $values( $array( ${ 0 1 "2" $tup( "Three" 3 ) ${ [4] } } ) ) ) ) );
	call assert_equals( 0, [ arr 0 ], ${-} );
	call assert_equals( 1, [ arr 1 ], ${-} );
	call assert_equals( "2", [ arr 2 ], ${-} );
	call assert_equals( $tup( "Three" 3 ), [ arr 3 ], ${-} );
	call assert_equals( "4", $child( [ arr 4 ] ), ${-} );
	call assert_throws( "1", ${ () { call $values( except( ${ 1 } ) ); } } );
	call assert_throws( "Not an array or no values.", ${ () { call $values( 0 ); } } );
	call assert_throws( "Not an array or no values.", ${ () { call $values( $array( 0 ) ); } } );
}

function testfunction() {
	call assert_equals( ONE :(
		$function( ${ () { 
			return :( $function( $parse( "( param ) { return param; }" ) ) ONE );
		} } ) ), ${-} );
	call assert_throws( "1", ${ () { return except( ${ 1 } ); } } );
	call assert_throws( "1", ${ () { call $function( except( ${ 1 } ) ); } } );
	call assert_throws( "1", ${ () { call :( $function( ${ ( param ) {} } ) except( ${ 1 } ) ); } } );
	call assert_throws( "Not an element.", ${ () { call $function( 0 ); } } );
	call assert_throws( "Expected '(' after '$function'", ${ () { call $function( ${ x } ); } } );
	call assert_throws( "Invalid name '1'", ${ () { call $function( ${ ( 1 ) {} } ); } } );
	call assert_throws( "Parameter 'x' already", ${ () { call $function( ${ ( x x ) {} } ); } } );
	call assert_throws( "Local variable 'x' already", ${ () { call $function( ${ ( x ) { var x; } } ); } } );
	call assert_throws( "Unrecognized keyword 'x'", ${ () { call $function( ${ () { x } } ); } } );
	call assert_throws( "Structure 'xxx' not declared", ${ ( ( xxx ) p ) {} } );
}

function testworker() {
	var worker = $execute( $worker( ${ () { locked { var a = 1; return a; } } } ) );
	call assert_equals( 1, $result( worker ), ${-} );
	call assert_equals( 1, $result( $execute( $worker( ${ ( a ) { let [ a 0 ] = 1; return [ a 0 ]; } } ), $buffer( 1 ) ) ), ${-} );
	call assert_throws( "Unable to lock", ${ () { call $result( $execute( $worker( ${ () { locked { locked {} } } } ) ) ); } } );
	call assert_throws( "1", ${ () { call $result( $execute( $worker( ${ ( a ) { throw a; } } ), "1" ) ); } } );
	call assert_throws( "Not an element.", ${ () { call $worker( 0 ); } } );
	call assert_throws( "Expected '(' after '$worker'", ${ () { call $worker( ${ x } ); } } );
	call assert_throws( "Invalid name '1'", ${ () { call $worker( ${ ( 1 ) {} } ); } } );
	call assert_throws( "Parameter 'x' already", ${ () { call $worker( ${ ( x x ) {} } ); } } );
	call assert_throws( "Not a worker", ${ () { call $execute( 0 ); } } );
	call assert_throws( "Incorrect number", ${ () { call $execute( $worker( ${ ( a ) {} } ) ); } } );
	call assert_throws( "Worker locked", ${ () { var w = $worker( ${ () {} } ); lock w { call $execute( w ); } } } );
	call assert_throws( "Values of this type", ${ () { call $execute( $worker( ${ ( a ) {} } ), ${ x } ); } } );
	call assert_throws( "Not a worker", ${ () { call $result( 0 ); } } );
	call assert_throws( "Worker locked", ${ () { var w = $worker( ${ () {} } ); lock w { call $result( w ); } } } );
	call assert_throws( "Worker exited", ${ () { call $result( $execute( $worker( ${ () { exit 0; } } ) ) ); } } );
	call assert_throws( "Values of this type", ${ () { call $result( $execute( $worker( ${ () { return $array( 0 ); } } ) ) ); } } );
	call assert_throws( "Operation", ${ () { call $result( $execute( $worker( ${ () { call $worker( 0 ); } } ) ) ); } } );
}

function testthiscall() {
	var ( exten ) obj = $new( exten );
	let [ obj exten.g ] = $function( ${ ( ( exten ) this x ) { let this.f = x; return x; } } );
	call assert_equals( 1, :exten.g( obj 1 ), ${-} );
	call assert_equals( 2, :obj.g( 2 ), ${-} );
	call assert_equals( 2, [ obj exten.f ], ${-} );
	let ext.g = obj.g;
	call assert_equals( 3, :ext.g( 3 ), ${-} );
	call assert_equals( 3, ext.f, ${-} );
	call assert_throws( "Not an array", ${ () { call :exten.g( 0 ); } } );
	call assert_throws( "Array index", ${ () { call :exten.g( $array( 0 ) ); } } );
	call assert_throws( "Not a function", ${ () { call :exten.g( $array( exten ) ); } } );
	call assert_throws( "Incorrect number of parameters", ${ () { call :ext.g(); } } );
	call assert_throws( "Undeclared", ${ () { call :x(); } } );
	call assert_throws( "Undeclared", ${ () { call :exten(); } } );
	call assert_throws( "Field 'exten.x' not declared", ${ () { call :exten.x(); } } );
	call assert_throws( "Expected '('", ${ () { call :exten.g; } } );
	call assert_throws( "Expected expression", ${ () { call :exten.g(); } } );
}

function testtype() {
	call assert_equals( 0, $type( 0 ), ${-} );
	call assert_equals( 1, $type( "" ), ${-} );
	call assert_equals( 2, $type( ${-} ), ${-} );
	call assert_equals( 3, $type( $array( 0 ) ), ${-} );
	call assert_equals( 4, $type( struc ), ${-} );
	call assert( $same( $type( $new( struc ) ) struc ), ${-} );
}

function testfield() {
	call assert_equals( "a", $field( struc 0 ), ${-} );
	call assert_equals( "g", $field( exten 6 ), ${-} );
	call assert_throws( "Not a structure", ${ () { call $field( 0 0 ); } } );
	call assert_throws( "Field index", ${ () { call $field( struc 5 ); } } );
}

function testinstanceof() {
	call assert_equals( 0, $instanceof( $new( struc ) exten ), ${-} );
	call assert( $same( ext $instanceof( ext exten ) ), ${-} );
	call assert( $same( ext $instanceof( ext struc ) ), ${-} );
	call assert_throws( "Not a structure", ${ () { call $instanceof( ext 0 ); } } );
}

program test {
	call hello();
	call assert( =( testvoid() 0 ), ${-} );
	call assert( =( testvars( ONE ) ONE ), ${-} );
	call testprint();
	call testarray();
	call testbuffer();
	call assert( =( fact( 3 ) 6 ), ${-} );
	call testswitch();
	call testif();
	call testwhile();
	call testtry();
	call testoper();
	call testinfix();
	call testarith();
	call testlogic();
	call testternary();
	call testcmp();
	call testcat();
	call testchr();
	call testsub();
	call testasc();
	call testhex();
	call testint();
	call testlen();
	call testtup();
	call testsrc();
	call testread();
	call testload();
	call testsave();
	call testflen();
	call testargc();
	call testargv();
	call testtime();
	call testparse();
	call testunparse();
	call testchild();
	call testnext();
	call testline();
	call testelem();
	call testquote();
	call testunquote();
	call testpack();
	call testunpack();
	call teststruct();
	call testfuncref();
	call testsame();
	call testeq();
	call teststridx();
	call testinterrupted();
	call testinc();
	call testdec();
	call testvalues();
	call testfunction();
	call testworker();
	call testthiscall();
	call testtype();
	call testfield();
	call testinstanceof();
	print "Tests passed.";
}
